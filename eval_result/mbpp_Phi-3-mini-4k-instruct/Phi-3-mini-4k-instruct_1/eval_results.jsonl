{"task_id": 2, "correct": 1, "predict_answer": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return tuple(common_elements)\nresult = similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\nprint(result)"}
{"task_id": 3, "correct": 1, "predict_answer": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": 6, "correct": 1, "predict_answer": "def differ_At_One_Bit_Pos(x, y):\n    x ^= y\n    return (x & (x-1)) == 0"}
{"task_id": 11, "correct": 1, "predict_answer": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif first_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    elif last_occurrence != -1:\n        return s[:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s"}
{"task_id": 12, "correct": 1, "predict_answer": "def sort_matrix(M):\n    return sorted(M, key=sum)"}
{"task_id": 14, "correct": 0, "predict_answer": "def find_Volume(l,b,h):\n    return l * b * h"}
{"task_id": 19, "correct": 1, "predict_answer": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": 24, "correct": 0, "predict_answer": "def binary_to_decimal(binary):\n    return int(binary, 2)"}
{"task_id": 27, "correct": 1, "predict_answer": "def remove(lst):\n    return [''.join([char for char in word if not char.isdigit()]) for word in lst]"}
{"task_id": 28, "correct": 1, "predict_answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"}
{"task_id": 29, "correct": 1, "predict_answer": "def get_Odd_Occurrence(arr,arr_size):\n    count_dict = {}\n    for i in range(arr_size):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None"}
{"task_id": 37, "correct": 1, "predict_answer": "def sort_mixed_list(mixed_list):\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    int_list.sort()\n    str_list.sort()\n    sorted_list = int_list + str_list\n    return sorted_list\nmixed_list = [19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]\nprint(sort_mixed_list(mixed_list))"}
{"task_id": 40, "correct": 1, "predict_answer": "def freq_element(nums):\n    freq_dict = {}\n    for sublist in nums:\n        for num in sublist:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n    return freq_dict"}
{"task_id": 41, "correct": 1, "predict_answer": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"}
{"task_id": 42, "correct": 0, "predict_answer": "def find_Sum(arr,n):\n    seen = set()\n    sum_of_repeats = 0\n    for num in arr:\n        if num in seen:\n            sum_of_repeats += num\n        else:\n            seen.add(num)\n    return sum_of_repeats"}
{"task_id": 49, "correct": 1, "predict_answer": "def specified_element(nums, N):\n    return [sublist[N] for sublist in nums]"}
{"task_id": 53, "correct": 1, "predict_answer": "def check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""}
{"task_id": 54, "correct": 1, "predict_answer": "def counting_sort(my_list):\n    max_value = max(my_list)\n    min_value = min(my_list)\n    range_of_values = max_value - min_value + 1\n    count_list = [0] * range_of_values\n    for num in my_list:\n        count_list[num - min_value] += 1\n    sorted_list = []\n    for i, count in enumerate(count_list):\n        sorted_list.extend([i + min_value] * count)\n    return sorted_list"}
{"task_id": 57, "correct": 1, "predict_answer": "def find_Max_Num(arr,n):\n    arr.sort(reverse=True)\n    return int(''.join(map(str,arr)))"}
{"task_id": 59, "correct": 1, "predict_answer": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": 61, "correct": 0, "predict_answer": "def count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(x) for x in s[i:j]) == n:\n                count += 1\n    return count"}
{"task_id": 64, "correct": 1, "predict_answer": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"}
{"task_id": 67, "correct": 1, "predict_answer": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": 68, "correct": 1, "predict_answer": "def is_Monotonic(A):\n    is_increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    is_decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    return is_increasing or is_decreasing\nprint(is_Monotonic([6, 5, 4, 4]))"}
{"task_id": 69, "correct": 1, "predict_answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"}
{"task_id": 74, "correct": 0, "predict_answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    last_color = None\n    last_pattern = None\n    for color, pattern in zip(colors, patterns):\n        if color != last_color or pattern != last_pattern:\n            return False\n        last_color = color\n        last_pattern = pattern\n    return True"}
{"task_id": 76, "correct": 0, "predict_answer": "def count_Squares(m, n):\n    return sum(i**2 for i in range(1, min(m, n) + 1))"}
{"task_id": 79, "correct": 1, "predict_answer": "def word_len(s):\n    return len(s) % 2 != 0"}
{"task_id": 88, "correct": 1, "predict_answer": "def freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": 89, "correct": 1, "predict_answer": "def closest_num(N):\n    return N - 1"}
{"task_id": 90, "correct": 1, "predict_answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"}
{"task_id": 91, "correct": 1, "predict_answer": "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"}
{"task_id": 93, "correct": 1, "predict_answer": "def power(a, b):\n    return a ** b"}
{"task_id": 94, "correct": 1, "predict_answer": "def index_minimum(test_list):\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0]"}
{"task_id": 96, "correct": 1, "predict_answer": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": 98, "correct": 1, "predict_answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": 99, "correct": 1, "predict_answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": 101, "correct": 1, "predict_answer": "def kth_element(arr, n, k):\n    return arr[k-1]"}
{"task_id": 105, "correct": 0, "predict_answer": "def count(lst):\n    return sum(isinstance(item, bool) for item in lst)"}
{"task_id": 106, "correct": 1, "predict_answer": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)"}
{"task_id": 109, "correct": 1, "predict_answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if int(s[i:] + s[:i], 2) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": 111, "correct": 1, "predict_answer": "def common_in_nested_lists(nestedlist):\n    common_items = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_items.intersection_update(sublist)\n    return list(common_items)"}
{"task_id": 115, "correct": 1, "predict_answer": "def empty_dit(list1):\n    return all(not d for d in list1)"}
{"task_id": 116, "correct": 1, "predict_answer": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"}
{"task_id": 118, "correct": 1, "predict_answer": "def string_to_list(string):\n    return string.split()"}
{"task_id": 121, "correct": 0, "predict_answer": "def check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\nA = [2, 7, 4, 0, 9, 5, 1, 3]\nn = len(A)\nsum = 6\ncount = 0\nprint(check_triplet(A, n, sum, count))"}
{"task_id": 130, "correct": 1, "predict_answer": "from collections import Counter\ndef max_occurrences(nums):\n    frequency = Counter(nums)\n    max_item, max_count = max(frequency.items(), key=lambda x: x[1])\n    return max_item, max_count"}
{"task_id": 131, "correct": 1, "predict_answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    start, end = 0, len(str1) - 1\n    while start < end:\n        if str1[start] not in vowels:\n            start += 1\n        elif str1[end] not in vowels:\n            end -= 1\n        else:\n            str1[start], str1[end] = str1[end], str1[start]\n            start, end = start + 1, end - 1\n    return ''.join(str1)"}
{"task_id": 145, "correct": 1, "predict_answer": "def max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": 154, "correct": 1, "predict_answer": "def specified_element(nums, N):\n    return [row[N] for row in nums]"}
{"task_id": 156, "correct": 1, "predict_answer": "def tuple_int_str(tuple_str):\n    return tuple(tuple(int(i) for i in t) for t in tuple_str)"}
{"task_id": 157, "correct": 0, "predict_answer": "def encode_list(list1):\n    encoded_list = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i-1]:\n            encoded_list.append([1, list1[i]])\n        else:\n            encoded_list[-1][1] += 1\n    return encoded_list"}
{"task_id": 163, "correct": 1, "predict_answer": "def area_polygon(s,l):\n    import math\n    return (s * l**2) / (4 * math.tan(math.pi / s))"}
{"task_id": 166, "correct": 1, "predict_answer": "def find_even_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": 167, "correct": 1, "predict_answer": "import math\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))"}
{"task_id": 168, "correct": 1, "predict_answer": "def frequency(a,x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"}
{"task_id": 169, "correct": 1, "predict_answer": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)\nprint(get_pell(4))"}
{"task_id": 170, "correct": 0, "predict_answer": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])"}
{"task_id": 176, "correct": 1, "predict_answer": "def perimeter_triangle(a,b,c):\n    return a + b + c"}
{"task_id": 187, "correct": 1, "predict_answer": "def longest_common_subsequence(X, Y, m, n):\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]"}
{"task_id": 189, "correct": 1, "predict_answer": "def first_Missing_Positive(arr,n):\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1"}
{"task_id": 191, "correct": 1, "predict_answer": "def check_monthnumber(monthname3):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if monthname3 in month_days:\n        return month_days[monthname3] == 30\n    else:\n        return False"}
{"task_id": 192, "correct": 1, "predict_answer": "def check_String(str):\n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False"}
{"task_id": 193, "correct": 1, "predict_answer": "def remove_tuple(test_tup):\n    return tuple(sorted(set(test_tup)))"}
{"task_id": 195, "correct": 1, "predict_answer": "def first(arr, x, n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"}
{"task_id": 196, "correct": 1, "predict_answer": "def remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]"}
{"task_id": 199, "correct": 1, "predict_answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": 200, "correct": 1, "predict_answer": "def position_max(list1):\n    max_value = max(list1)\n    return [index for index, value in enumerate(list1) if value == max_value]"}
{"task_id": 201, "correct": 0, "predict_answer": "def analyze_data(data, N):\n    max_aggregate = 0\n    odd_pairs_count = 0\n    for name, score in data:\n        max_aggregate += score\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_result = data[i][1] ^ data[j][1]\n            if xor_result % 2 != 0:\n                odd_pairs_count += 1\n    return {\n        'max_aggregate': max_aggregate,\n        'odd_pairs_count': odd_pairs_count\n    }\ndata = [('Juan Whelan', 90), ('Sabah Colley', 88)]\nN = len(data)\nresult = analyze_data(data, N)\nprint(result)"}
{"task_id": 205, "correct": 0, "predict_answer": "def inversion_elements(test_tup):\n    return tuple(-x for x in test_tup)"}
{"task_id": 206, "correct": 1, "predict_answer": "def concatenate_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return tuple(result)\nprint(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))"}
{"task_id": 213, "correct": 0, "predict_answer": "def concatenate_strings(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + \" \" + test_tup2[i])\n    return tuple(result)"}
{"task_id": 215, "correct": 0, "predict_answer": "def decode_list(alist):\n    decoded_list = []\n    for item in alist:\n        if type(item) == list:\n            decoded_list.extend(decode_list(item))\n        else:\n            decoded_list.append(item)\n    return decoded_list"}
{"task_id": 222, "correct": 1, "predict_answer": "def check_type(test_tuple):\n    return len(set(map(type, test_tuple))) == 1"}
{"task_id": 223, "correct": 1, "predict_answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"}
{"task_id": 225, "correct": 1, "predict_answer": "def find_Min(arr,low,high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = int((low + high)/2)\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)"}
{"task_id": 226, "correct": 1, "predict_answer": "def odd_values_string(str):\n    return str[::2]"}
{"task_id": 227, "correct": 1, "predict_answer": "def min_of_three(a,b,c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"}
{"task_id": 231, "correct": 0, "predict_answer": "def max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i + 1):\n            curr_sum += tri[i][j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"}
{"task_id": 232, "correct": 1, "predict_answer": "def larg_nnum(list1,n):\n    list1.sort(reverse=True)\n    return list1[:n]"}
{"task_id": 238, "correct": 0, "predict_answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(set(str[i:j+1])) > 1:\n                count += 1\n    return count\nprint(number_of_substrings(\"abc\"))"}
{"task_id": 240, "correct": 0, "predict_answer": "def replace_list(list1,list2):\n    list1.extend(list2)\n    list1.pop()\n    return list1"}
{"task_id": 242, "correct": 1, "predict_answer": "def count_charac(str1):\n    return len(str1)"}
{"task_id": 246, "correct": 0, "predict_answer": "def babylonian_squareroot(number):\n    guess = number / 2.0\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2.0\n    return guess"}
{"task_id": 247, "correct": 1, "predict_answer": "def lps(str):\n    def lps_helper(s, i, j):\n        if i == j:\n            return 1\n        if s[i] == s[j] and i + 1 == j:\n            return 2\n        if s[i] == s[j]:\n            return lps_helper(s, i + 1, j - 1) + 2\n        else:\n            return max(lps_helper(s, i, j - 1), lps_helper(s, i + 1, j))\n    return lps_helper(str, 0, len(str) - 1)"}
{"task_id": 249, "correct": 1, "predict_answer": "def intersection_array(array_nums1,array_nums2):\n    return list(filter(lambda x: x in array_nums2, array_nums1))"}
{"task_id": 256, "correct": 1, "predict_answer": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"}
{"task_id": 257, "correct": 1, "predict_answer": "def swap_numbers(a, b):\n    return b, a"}
{"task_id": 258, "correct": 1, "predict_answer": "def count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"}
{"task_id": 261, "correct": 1, "predict_answer": "def division_elements(test_tup1, test_tup2):\n    return tuple(x // y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 262, "correct": 1, "predict_answer": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"}
{"task_id": 266, "correct": 1, "predict_answer": "def lateralsurface_cube(l):\n    return 4 * l * l"}
{"task_id": 267, "correct": 1, "predict_answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": 269, "correct": 1, "predict_answer": "def ascii_value(k):\n    return ord(k)"}
{"task_id": 273, "correct": 1, "predict_answer": "def substract_elements(test_tup1, test_tup2):\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 277, "correct": 1, "predict_answer": "def dict_filter(dict,n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"}
{"task_id": 278, "correct": 0, "predict_answer": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            count += 1\n    return count"}
{"task_id": 281, "correct": 1, "predict_answer": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"}
{"task_id": 282, "correct": 1, "predict_answer": "def sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"}
{"task_id": 283, "correct": 1, "predict_answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"}
{"task_id": 284, "correct": 1, "predict_answer": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": 287, "correct": 0, "predict_answer": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])"}
{"task_id": 290, "correct": 1, "predict_answer": "def max_length(list1):\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": 292, "correct": 1, "predict_answer": "def find(n, m):\n    return n // m"}
{"task_id": 297, "correct": 1, "predict_answer": "def flatten_list(list1):\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": 301, "correct": 1, "predict_answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": 309, "correct": 1, "predict_answer": "def maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": 317, "correct": 0, "predict_answer": "def modified_encode(alist):\n    result = []\n    temp = []\n    for i in range(len(alist)):\n        if i == 0 or alist[i] != alist[i-1]:\n            if temp:\n                result.append(temp)\n            temp = [alist[i]]\n        else:\n            temp.append(alist[i])\n    if temp:\n        result.append(temp)\n    return result"}
{"task_id": 319, "correct": 0, "predict_answer": "import re\ndef find_long_word(text):\n    pattern = r'\\b\\w{5,}\\b'\n    long_words = re.findall(pattern, text)\n    return long_words\nresult = find_long_word('Please move back to strem')\nprint(result)"}
{"task_id": 322, "correct": 1, "predict_answer": "def position_min(list1):\n    min_value = min(list1)\n    return [i for i, value in enumerate(list1) if value == min_value]"}
{"task_id": 325, "correct": 0, "predict_answer": "def get_Min_Squares(n):\n    squares = []\n    while n > 0:\n        i = 1\n        while i*i <= n:\n            squares.append(i*i)\n            i += 1\n        n -= min(squares)\n        squares.remove(min(squares))\n    return len(squares)"}
{"task_id": 330, "correct": 1, "predict_answer": "import re\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\nprint(find_char('For the four consumer complaints contact manager AKR reddy'))"}
{"task_id": 333, "correct": 1, "predict_answer": "def Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])"}
{"task_id": 334, "correct": 1, "predict_answer": "def check_Validity(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"}
{"task_id": 336, "correct": 1, "predict_answer": "import calendar\ndef check_monthnum(monthname1):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return month_days.get(monthname1, 0) == 28"}
{"task_id": 340, "correct": 0, "predict_answer": "def sum_three_smallest_nums(lst):\n    lst.sort()\n    return lst[0] + lst[1] + lst[2]"}
{"task_id": 341, "correct": 0, "predict_answer": "def set_to_tuple(s):\n    return tuple(s)"}
{"task_id": 345, "correct": 0, "predict_answer": "def diff_consecutivenums(nums):\n    discrepancies = []\n    for i in range(len(nums) - 1):\n        discrepancy = abs(nums[i] - nums[i + 1])\n        discrepancies.append(discrepancy)\n    return discrepancies"}
{"task_id": 349, "correct": 1, "predict_answer": "def check(string):\n    if all(char in ['0', '1'] for char in string):\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(check(\"01010101010\"))  \nprint(check(\"01020101010\"))"}
{"task_id": 350, "correct": 1, "predict_answer": "def minimum_Length(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    result = ''\n    for char in s:\n        if char != max_char:\n            result += char\n    return len(result)\nprint(minimum_Length(\"mnm\"))"}
{"task_id": 352, "correct": 1, "predict_answer": "def unique_Characters(str):\n    return len(str) == len(set(str))"}
{"task_id": 357, "correct": 1, "predict_answer": "def find_max(test_list):\n    max_value = test_list[0][1]\n    for record in test_list:\n        if record[1] > max_value:\n            max_value = record[1]\n    return max_value"}
{"task_id": 358, "correct": 1, "predict_answer": "def moddiv_list(nums1,nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))"}
{"task_id": 359, "correct": 1, "predict_answer": "def Check_Solution(a,b,c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if root1 == 2*root2 or root2 == 2*root1:\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": 361, "correct": 1, "predict_answer": "def remove_empty(list1):\n    return [item for item in list1 if item != []]"}
{"task_id": 362, "correct": 1, "predict_answer": "def max_occurrences(nums):\n    num_counts = {}\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n        if num_counts[num] > max_count:\n            max_count = num_counts[num]\n            max_item = num\n    return max_item"}
{"task_id": 363, "correct": 1, "predict_answer": "def add_K_element(test_list, K):\n    return [tuple(map(lambda x: x + K, tpl)) for tpl in test_list]"}
{"task_id": 365, "correct": 1, "predict_answer": "def count_Digit(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count"}
{"task_id": 366, "correct": 1, "predict_answer": "def adjacent_num_product(list_nums):\n    max_product = 0\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": 370, "correct": 1, "predict_answer": "def float_sort(price):\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"}
{"task_id": 371, "correct": 1, "predict_answer": "def smallest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return right_element + 1"}
{"task_id": 372, "correct": 1, "predict_answer": "import heapq\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    sorted_nums = [heapq.heappop(nums) for _ in range(len(nums))]\n    return sorted_nums\nprint(heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))"}
{"task_id": 376, "correct": 1, "predict_answer": "def remove_replica(test_tup):\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append('MSP')\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"}
{"task_id": 378, "correct": 1, "predict_answer": "def move_first(test_list):\n    last_element = test_list[-1]\n    test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list"}
{"task_id": 381, "correct": 1, "predict_answer": "def index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])"}
{"task_id": 382, "correct": 1, "predict_answer": "def find_rotation_count(A):\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": 384, "correct": 1, "predict_answer": "def frequency_Of_Smallest(n,arr):\n    min_val = min(arr)\n    return arr.count(min_val)"}
{"task_id": 387, "correct": 1, "predict_answer": "def even_or_odd(N):\n    num = int(N, 16)\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 388, "correct": 1, "predict_answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": 389, "correct": 1, "predict_answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": 391, "correct": 1, "predict_answer": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    return result"}
{"task_id": 397, "correct": 1, "predict_answer": "def median_numbers(a,b,c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])"}
{"task_id": 400, "correct": 0, "predict_answer": "def extract_freq(test_list):\n    unique_tuples = set()\n    for t in test_list:\n        unique_tuples.add(t)\n    return len(unique_tuples)\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))"}
{"task_id": 401, "correct": 0, "predict_answer": "def add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(map(sum, zip(*pair))) for pair in zip(test_tup1, test_tup2))"}
{"task_id": 403, "correct": 1, "predict_answer": "import re\ndef is_valid_URL(url):\n    regex = r'^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$'\n    if re.search(regex, url):\n        return True\n    else:\n        return False"}
{"task_id": 405, "correct": 1, "predict_answer": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex"}
{"task_id": 406, "correct": 1, "predict_answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""}
{"task_id": 408, "correct": 1, "predict_answer": "def k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"}
{"task_id": 410, "correct": 0, "predict_answer": "def min_val(listval):\n    return min(listval)"}
{"task_id": 413, "correct": 1, "predict_answer": "def extract_nth_element(list1, n):\n    return [tup[n] for tup in list1]"}
{"task_id": 414, "correct": 1, "predict_answer": "def overlapping(list1, list2):\n    return any(item in list2 for item in list1)"}
{"task_id": 418, "correct": 0, "predict_answer": "def Find_Max(lst):"}
{"task_id": 420, "correct": 0, "predict_answer": "def cube_Sum(n):\n    return sum([i**3 for i in range(2, 2*n+1, 2)])"}
{"task_id": 421, "correct": 1, "predict_answer": "def concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))"}
{"task_id": 426, "correct": 1, "predict_answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"}
{"task_id": 428, "correct": 0, "predict_answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\nmy_list = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]\nshell_sort(my_list)\nprint(my_list)"}
{"task_id": 429, "correct": 1, "predict_answer": "def and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"}
{"task_id": 432, "correct": 1, "predict_answer": "def median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2"}
{"task_id": 435, "correct": 1, "predict_answer": "def last_Digit(n):\n    return n % 10"}
{"task_id": 439, "correct": 1, "predict_answer": "def multiple_to_single(L):\n    result = ''\n    for num in L:\n        result += str(num)\n    return int(result)"}
{"task_id": 445, "correct": 1, "predict_answer": "def index_multiplication(test_tup1, test_tup2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))"}
{"task_id": 446, "correct": 1, "predict_answer": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count"}
{"task_id": 447, "correct": 1, "predict_answer": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"}
{"task_id": 457, "correct": 1, "predict_answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"}
{"task_id": 459, "correct": 1, "predict_answer": "import re\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)"}
{"task_id": 463, "correct": 1, "predict_answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result"}
{"task_id": 467, "correct": 0, "predict_answer": "def decimal_to_Octal(deciNum):\n    return oct(deciNum)[2:]"}
{"task_id": 469, "correct": 1, "predict_answer": "def max_profit(price, k):\n    if not price or k == 0:\n        return 0\n    n = len(price)\n    profits = [[0 for _ in range(n)] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            profits[i][j] = max(profits[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, profits[i - 1][j] - price[j])\n    return profits[k][n - 1]"}
{"task_id": 472, "correct": 1, "predict_answer": "def check_Consecutive(l):\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True"}
{"task_id": 475, "correct": 1, "predict_answer": "def sort_counter(dict1):\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_list"}
{"task_id": 477, "correct": 1, "predict_answer": "def is_lower(string):\n    return string.lower()"}
{"task_id": 478, "correct": 1, "predict_answer": "def remove_lowercase(str1):\n    result = ''\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result"}
{"task_id": 479, "correct": 1, "predict_answer": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": 480, "correct": 1, "predict_answer": "def get_max_occuring_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char"}
{"task_id": 484, "correct": 0, "predict_answer": "def remove_matching_tuple(test_list1, test_list2):\n    return list(set(test_list1) - set(test_list2))"}
{"task_id": 487, "correct": 1, "predict_answer": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"}
{"task_id": 488, "correct": 1, "predict_answer": "def area_pentagon(a):\n    import math\n    return (5 * a ** 2) / (4 * math.tan(math.pi / 5))"}
{"task_id": 489, "correct": 1, "predict_answer": "def frequency_Of_Largest(n,arr):\n    max_val = max(arr)\n    return arr.count(max_val)"}
{"task_id": 491, "correct": 1, "predict_answer": "def sum_gp(a,n,r):\n    total_sum = 0\n    for i in range(n):\n        total_sum += a * (r ** i)\n    return total_sum"}
{"task_id": 492, "correct": 1, "predict_answer": "def binary_search(item_list, item):\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        guess = item_list[mid]\n        if guess == item:\n            return True\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False"}
{"task_id": 494, "correct": 1, "predict_answer": "def binary_to_integer(test_tup):\n    binary_str = ''.join(str(bit) for bit in test_tup)\n    return str(int(binary_str, 2))"}
{"task_id": 495, "correct": 1, "predict_answer": "import re\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 498, "correct": 1, "predict_answer": "def gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x"}
{"task_id": 500, "correct": 0, "predict_answer": "def concatenate_elements(lst):\n    return ' '.join(lst)"}
{"task_id": 502, "correct": 0, "predict_answer": "def find(n,m):\n    return abs(n-m)"}
{"task_id": 505, "correct": 0, "predict_answer": "def re_order(A):\n    zero_count = A.count(0)\n    A.remove(0)\n    A.extend([0] * zero_count)\n    return A"}
{"task_id": 506, "correct": 1, "predict_answer": "def permutation_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\nprint(permutation_coefficient(10, 2))"}
{"task_id": 507, "correct": 1, "predict_answer": "def remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]"}
{"task_id": 509, "correct": 0, "predict_answer": "def average_Odd(n):\n    sum_of_odds = sum(i for i in range(1, n + 1) if i % 2 != 0)\n    count_of_odds = len([i for i in range(1, n + 1) if i % 2 != 0])\n    average = sum_of_odds / count_of_odds\n    return average\nprint(average_Odd(9))"}
{"task_id": 513, "correct": 1, "predict_answer": "def add_str(test_tup, K):\n    result = []\n    for item in test_tup:\n        result.append(item)\n        result.append(K)\n    return result"}
{"task_id": 516, "correct": 0, "predict_answer": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = nums[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = nums[i] // exp\n        output[count[index % 10] - 1] = nums[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(n):\n        nums[i] = output[i]\ndef radix_sort(nums):\n    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\nnums = [15, 79, 25, 68, 37]\nradix_sort(nums)\nprint(nums)"}
{"task_id": 518, "correct": 1, "predict_answer": "import math\ndef sqrt_root(num):\n    return math.sqrt(num)"}
{"task_id": 519, "correct": 1, "predict_answer": "def volume_tetrahedron(num):\n    volume = (num ** 3) / (6 * (2 ** 0.5))\n    return round(volume, 2)"}
{"task_id": 522, "correct": 1, "predict_answer": "def lbs(arr):\n    n = len(arr)\n    up = [1] * n\n    down = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and up[i] < up[j] + 1:\n                up[i] = up[j] + 1\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and down[i] < down[j] + 1:\n                down[i] = down[j] + 1\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, up[i] + down[i] - 1)\n    return max_length"}
{"task_id": 526, "correct": 1, "predict_answer": "def capitalize_first_last_letters(str1):\n    words = str1.split()\n    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in words]\n    return ' '.join(capitalized_words)\nprint(capitalize_first_last_letters(\"python\"))"}
{"task_id": 528, "correct": 1, "predict_answer": "def min_length(list1):\n    min_len = float('inf')\n    min_list = []\n    for lst in list1:\n        if len(lst) < min_len:\n            min_len = len(lst)\n            min_list = lst\n    return (min_len, min_list)"}
{"task_id": 531, "correct": 1, "predict_answer": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    for i in range(m):\n        for j in range(coins[i], V + 1):\n            dp[j] = min(dp[j], dp[j - coins[i]] + 1)\n    return dp[V] if dp[V] != float('inf') else -1\ncoins = [9, 6, 5, 1]\nm = 4\nV = 11\nprint(min_coins(coins, m, V))"}
{"task_id": 534, "correct": 0, "predict_answer": "def search_literal(pattern, text):\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return (-1, -1)\n    return (start_index, len(pattern))"}
{"task_id": 539, "correct": 1, "predict_answer": "def basesnum_coresspondingnum(bases_num,index):\n    return list(map(lambda x, y: x ** y, bases_num, index))"}
{"task_id": 540, "correct": 1, "predict_answer": "def find_Diff(arr,n):\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    max_freq = max(freq_dict.values())\n    min_freq = min(freq_dict.values())\n    return max_freq - min_freq"}
{"task_id": 541, "correct": 0, "predict_answer": "def get_sum(n):\n    divisors = [1]\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) > n"}
{"task_id": 542, "correct": 1, "predict_answer": "import re\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"task_id": 543, "correct": 1, "predict_answer": "def count_digits(num1,num2):\n    sum = num1 + num2\n    return len(str(sum))"}
{"task_id": 544, "correct": 1, "predict_answer": "def flatten_tuple(test_list):\n    return ' '.join([' '.join(map(str, t)) for t in test_list])"}
{"task_id": 549, "correct": 0, "predict_answer": "def odd_Num_Sum(n):\n    return sum(i**5 for i in range(1, n+1) if i % 2 != 0)"}
{"task_id": 550, "correct": 0, "predict_answer": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = int((low + high)/2)\n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    return find_Max(arr, low, mid)"}
{"task_id": 554, "correct": 1, "predict_answer": "def Split(lst):\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": 555, "correct": 1, "predict_answer": "def difference(n):\n    sum_of_natural_numbers = (n * (n + 1)) // 2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes - sum_of_natural_numbers\nprint(difference(3))"}
{"task_id": 556, "correct": 1, "predict_answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\nprint(find_Odd_Pair([5,4,7,2,1], 5))"}
{"task_id": 560, "correct": 1, "predict_answer": "def union_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) | set(test_tup2))"}
{"task_id": 563, "correct": 0, "predict_answer": "def extract_values(text):\n    return text.split(', ')"}
{"task_id": 564, "correct": 0, "predict_answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"}
{"task_id": 565, "correct": 1, "predict_answer": "def split(word):\n    return list(word)"}
{"task_id": 568, "correct": 1, "predict_answer": "def empty_list(length):\n    return [{}] * length"}
{"task_id": 569, "correct": 1, "predict_answer": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]"}
{"task_id": 570, "correct": 0, "predict_answer": "def remove_words(list1, charlist):\n    new_list = []\n    for item in list1:\n        new_item = ''\n        for char in item:\n            if char not in charlist:\n                new_item += char\n        new_list.append(new_item)\n    return new_list\nremove_words(['Red color', 'Orange"}
{"task_id": 573, "correct": 1, "predict_answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": 576, "correct": 1, "predict_answer": "def is_Sub_Array(A,B,n,m):\n    for i in range(n-m+1):\n        if A[i:i+m] == B:\n            return True\n    return False"}
{"task_id": 577, "correct": 1, "predict_answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\nprint(last_Digit_Factorial(4))"}
{"task_id": 578, "correct": 1, "predict_answer": "def interleave_lists(list1,list2,list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": 579, "correct": 1, "predict_answer": "def find_dissimilar(test_tup1, test_tup2):\n    dissimilar_ingredients = tuple(set(test_tup1) ^ set(test_tup2))\n    return dissimilar_ingredients"}
{"task_id": 580, "correct": 0, "predict_answer": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, int):\n            if even_fnc(item):\n                result.append(item)\n        elif isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n    return tuple(result)\ndef is_even(num):\n    return num % 2 == 0\nprint(even_ele((4, 5, (7, 6, (2, 4)), 6, 8), is_even))"}
{"task_id": 581, "correct": 1, "predict_answer": "def surface_Area(b,s):\n    return b**2 + 2*b*s"}
{"task_id": 582, "correct": 0, "predict_answer": "def my_dict(dict1):\n    return bool(dict1)"}
{"task_id": 583, "correct": 1, "predict_answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    return res"}
{"task_id": 585, "correct": 1, "predict_answer": "import heapq\ndef expensive_items(items, n):\n    return heapq.nlargest(n, items, key=lambda item: item['price'])"}
{"task_id": 586, "correct": 1, "predict_answer": "def split_Arr(a,n,k):\n    first_part = a[:k]\n    second_part = a[k:]\n    result = second_part + first_part\n    return result"}
{"task_id": 589, "correct": 1, "predict_answer": "def perfect_squares(a, b):\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares"}
{"task_id": 591, "correct": 1, "predict_answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 593, "correct": 1, "predict_answer": "def removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))"}
{"task_id": 596, "correct": 1, "predict_answer": "import sys\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)"}
{"task_id": 598, "correct": 1, "predict_answer": "def armstrong_number(number):\n    sum = 0\n    temp = number\n    order = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return sum == number"}
{"task_id": 599, "correct": 0, "predict_answer": "```"}
{"task_id": 604, "correct": 1, "predict_answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\nprint(reverse_words(\"python program\"))"}
{"task_id": 605, "correct": 1, "predict_answer": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": 607, "correct": 1, "predict_answer": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": 610, "correct": 1, "predict_answer": "def remove_kth_element(list1, L):\n    list1.pop(L-1)\n    return list1"}
{"task_id": 611, "correct": 1, "predict_answer": "def max_of_nth(test_list, N):\n    max_val = float('-inf')\n    for row in test_list:\n        if N < len(row):\n            max_val = max(max_val, row[N])\n    return max_val\nresult = max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\nprint(result)"}
{"task_id": 613, "correct": 1, "predict_answer": "def maximum_value(test_list):\n    result = []\n    for item in test_list:\n        key, values = item\n        max_value = max(values)\n        result.append((key, max_value))\n    return result"}
{"task_id": 614, "correct": 0, "predict_answer": "def cummulative_sum(test_list):\n    return sum(sum(sublist) for sublist in test_list)"}
{"task_id": 618, "correct": 1, "predict_answer": "def div_list(nums1, nums2):\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"}
{"task_id": 624, "correct": 1, "predict_answer": "def is_upper(string):\n    return string.upper()"}
{"task_id": 625, "correct": 1, "predict_answer": "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 627, "correct": 1, "predict_answer": "def find_First_Missing(array,start,end):\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    return end + 1"}
{"task_id": 628, "correct": 1, "predict_answer": "import urllib.parse\ndef replace_spaces(string):\n    return urllib.parse.quote(string)"}
{"task_id": 634, "correct": 1, "predict_answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**4\n    return sum"}
{"task_id": 635, "correct": 1, "predict_answer": "import heapq\ndef heap_sort(iterable):\n    heap = iterable[:]\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))"}
{"task_id": 639, "correct": 1, "predict_answer": "def sample_nam(sample_names):\n    total_duration = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_duration += len(name)\n    return total_duration"}
{"task_id": 646, "correct": 0, "predict_answer": "def No_of_cubes(N, K):\n    return (N // K) ** 3"}
{"task_id": 647, "correct": 1, "predict_answer": "def split_upperstring(text):\n    result = []\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return result"}
{"task_id": 649, "correct": 0, "predict_answer": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1])"}
{"task_id": 653, "correct": 1, "predict_answer": "from collections import defaultdict\ndef grouping_dictionary(l):\n    result = defaultdict(list)\n    for key, value in l:\n        result[key].append(value)\n    return dict(result)"}
{"task_id": 654, "correct": 1, "predict_answer": "def rectangle_perimeter(l,b):\n    return 2 * (l + b)"}
{"task_id": 657, "correct": 1, "predict_answer": "def first_Digit(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    factorial_str = str(factorial)\n    return int(factorial_str[0])\nprint(first_Digit(5))"}
{"task_id": 658, "correct": 1, "predict_answer": "def max_occurrences(list1):\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    return max_item"}
{"task_id": 662, "correct": 1, "predict_answer": "def sorted_dict(dict1):\n    return {k: sorted(v) for k, v in dict1.items()}"}
{"task_id": 663, "correct": 1, "predict_answer": "def find_max_val(n, x, y):\n    if y == 0:\n        return n\n    else:\n        return n - (n % x) + y"}
{"task_id": 664, "correct": 0, "predict_answer": "def average_Even(n):\n    if n % 2 != 0:\n        raise ValueError(\"Input must be an even number\")\n    even_numbers = [i for i in range(2, n + 1, 2)]\n    return sum(even_numbers) / len(even_numbers)"}
{"task_id": 665, "correct": 1, "predict_answer": "def move_last(num_list):\n    if not num_list:\n        return num_list\n    return num_list[1:] + num_list[:1]"}
{"task_id": 667, "correct": 1, "predict_answer": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": 668, "correct": 0, "predict_answer": "def replace(string, char):\n    new_string = ''\n    for c in string:\n        if c != char:\n            new_string += c\n    return new_string"}
{"task_id": 669, "correct": 1, "predict_answer": "import re\ndef check_IP(Ip):\n    pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    if pattern.match(Ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'"}
{"task_id": 673, "correct": 1, "predict_answer": "def convert(list):\n    return int(''.join(map(str, list)))"}
{"task_id": 675, "correct": 1, "predict_answer": "def sum_nums(x, y, m, n):\n    total_sum = x + y\n    if m <= total_sum <= n:\n        return 20\n    else:\n        return total_sum"}
{"task_id": 676, "correct": 1, "predict_answer": "import re\ndef remove_extra_char(text1):\n    return re.sub(r'[^a-zA-Z0-9]', '', text1)"}
{"task_id": 678, "correct": 1, "predict_answer": "def remove_spaces(str1):\n    return ''.join(str1.split())"}
{"task_id": 679, "correct": 0, "predict_answer": "def access_key(dictionary, index):\n    sorted_keys = sorted(dictionary.keys())\n    if index < 0 or index >= len(sorted_keys):\n        return 'Key not found'\n    return sorted_keys[index]"}
{"task_id": 680, "correct": 1, "predict_answer": "def increasing_trend(nums):\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True"}
{"task_id": 681, "correct": 1, "predict_answer": "def smallest_Divisor(n):\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n"}
{"task_id": 682, "correct": 1, "predict_answer": "def mul_list(nums1,nums2):\n    return list(map(lambda x, y: x*y, nums1, nums2))"}
{"task_id": 683, "correct": 1, "predict_answer": "def sum_Square(n):\n    for i in range(int(n**0.5) + 1):\n        j = int((n - i**2)**0.5)\n        if i**2 + j**2 == n:\n            return True\n    return False"}
{"task_id": 688, "correct": 0, "predict_answer": "def len_complex(a,b):\n    return float(abs(a-b))"}
{"task_id": 689, "correct": 1, "predict_answer": "def min_jumps(arr, n):\n    if n == 0 or arr[0] == 0:\n        return float('inf')\n    min_jumps = [0] * n\n    for i in range(1, n):\n        min_jumps[i] = float('inf')\n        for j in range(i):\n            if i <= j + arr[j] and min_jumps[j] != float('inf'):\n                min_jumps[i] = min(min_jumps[i], min_jumps[j] + 1)\n                break\n    return min_jumps[n - 1]"}
{"task_id": 691, "correct": 1, "predict_answer": "from collections import defaultdict\ndef group_element(test_list):\n    result = defaultdict(list)\n    for item in test_list:\n        result[item[1]].append(item[0])\n    return dict(result)"}
{"task_id": 692, "correct": 1, "predict_answer": "import math\ndef last_Two_Digits(N):\n    factorial = math.factorial(N)\n    last_two_digits = factorial % 100\n    return last_two_digits\nprint(last_Two_Digits(7))"}
{"task_id": 695, "correct": 1, "predict_answer": "def check_greater(test_tup1, test_tup2):\n    return all(x < y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 696, "correct": 1, "predict_answer": "def zip_list(list1,list2):\n    return [a+b for a, b in zip(list1, list2)]"}
{"task_id": 697, "correct": 1, "predict_answer": "def count_even(array_nums):\n    return len(list(filter(lambda x: x % 2 == 0, array_nums)))"}
{"task_id": 701, "correct": 0, "predict_answer": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1"}
{"task_id": 704, "correct": 1, "predict_answer": "def harmonic_sum(n):\n    harmonic_sum = 0\n    for i in range(1, n + 1):\n        harmonic_sum += 1 / i\n    return harmonic_sum\nprint(harmonic_sum(10))"}
{"task_id": 705, "correct": 1, "predict_answer": "def sort_sublists(list1):\n    return sorted(list1, key=lambda x: (len(x), x))"}
{"task_id": 707, "correct": 1, "predict_answer": "def count_Set_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count"}
{"task_id": 708, "correct": 1, "predict_answer": "def Convert(string):\n    return string.split()"}
{"task_id": 711, "correct": 1, "predict_answer": "def product_Equal(n):\n    even_product = 1\n    odd_product = 1\n    n_str = str(n)\n    for i in range(len(n_str)):\n        if i % 2 == 0:\n            even_product *= int(n_str[i])\n        else:\n            odd_product *= int(n_str[i])\n    return even_product == odd_product"}
{"task_id": 715, "correct": 1, "predict_answer": "def str_to_tuple(test_str):\n    return tuple(map(int, test_str.split(',')))"}
{"task_id": 716, "correct": 1, "predict_answer": "def rombus_perimeter(a):\n    return 4 * a"}
{"task_id": 717, "correct": 0, "predict_answer": "import math\ndef sd_calc(data):\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / len(data)\n    standard_deviation = math.sqrt(variance)\n    return standard_deviation"}
{"task_id": 718, "correct": 1, "predict_answer": "def alternate_elements(list1):\n    return [list1[i] for i in range(0, len(list1), 2)]"}
{"task_id": 720, "correct": 1, "predict_answer": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)"}
{"task_id": 722, "correct": 0, "predict_answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] == h and data[1] == w:\n            filtered_students[name] = data\n    return filtered_students\nstudents = {\n    'Cierra Vega': (6.2, 70),\n    'Alden Cantrell': (5.9, 65),\n    'Kierra Gentry': (6.0, 68),\n    'Pierre Cox': (5.8, 66"}
{"task_id": 724, "correct": 0, "predict_answer": "def power_base_sum(base, power):\n    result = 0\n    while power > 0:\n        digit = power % base\n        result += digit\n        power //= base\n    return result"}
{"task_id": 726, "correct": 1, "predict_answer": "def multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"}
{"task_id": 727, "correct": 1, "predict_answer": "import re\ndef remove_char(S):\n    return re.sub(r'[^a-zA-Z0-9]', '', S)"}
{"task_id": 729, "correct": 1, "predict_answer": "def add_list(nums1,nums2):\n    return list(map(lambda x, y: x + y, nums1, nums2))"}
{"task_id": 730, "correct": 1, "predict_answer": "def consecutive_duplicates(nums):\n    result = []\n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    return result"}
{"task_id": 731, "correct": 1, "predict_answer": "import math\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": 732, "correct": 1, "predict_answer": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": 736, "correct": 1, "predict_answer": "def left_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)"}
{"task_id": 737, "correct": 1, "predict_answer": "import re\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    if re.match(pattern, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\nprint(check_str(\"annie\"))  \nprint(check_str(\"bob\"))"}
{"task_id": 739, "correct": 1, "predict_answer": "def find_Index(n):\n    def triangular_number(k):\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        tri_num = triangular_number(k)\n        if len(str(tri_num)) == n:\n            return k\n        k += 1\nprint(find_Index(2))"}
{"task_id": 740, "correct": 1, "predict_answer": "def tuple_to_dict(test_tup):\n    result_dict = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        result_dict[test_tup[i]] = test_tup[i + 1]\n    return result_dict\nprint(tuple_to_dict((1, 5, 7, 10, 13, 5)))"}
{"task_id": 744, "correct": 1, "predict_answer": "def check_none(test_tup):\n    return None in test_tup"}
{"task_id": 747, "correct": 1, "predict_answer": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]"}
{"task_id": 751, "correct": 0, "predict_answer": "def check_min_heap(arr, i):\n    n = len(arr)\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[i] > arr[left]:\n        return False\n    if right < n and arr[i] > arr[right]:\n        return False\n    return True"}
{"task_id": 752, "correct": 1, "predict_answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"}
{"task_id": 753, "correct": 1, "predict_answer": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]"}
{"task_id": 755, "correct": 1, "predict_answer": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1] if len(unique_numbers) >= 2 else None"}
{"task_id": 758, "correct": 1, "predict_answer": "def unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    return unique_dict"}
{"task_id": 759, "correct": 0, "predict_answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"}
{"task_id": 762, "correct": 1, "predict_answer": "import calendar\ndef check_monthnumber_number(monthnum3):\n    days_in_month = calendar.monthrange(2023, monthnum3)[1]\n    return days_in_month == 30"}
{"task_id": 764, "correct": 1, "predict_answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": 768, "correct": 1, "predict_answer": "def check_Odd_Parity(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": 770, "correct": 1, "predict_answer": "def odd_Num_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"}
{"task_id": 771, "correct": 1, "predict_answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char != \")\":\n                    return False\n            if current_char == '{':\n                if char != \"}\":\n                    return False\n            if current_char == '[':\n                if char != \"]\":\n                    return False\n    if stack:\n        return False\n    return True"}
{"task_id": 772, "correct": 1, "predict_answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    result = ' '.join(filtered_words)\n    return result\nprint(remove_length('The person is most value tet', 3))"}
{"task_id": 775, "correct": 0, "predict_answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] != nums[i-1]:\n            return False\n    return True"}
{"task_id": 778, "correct": 1, "predict_answer": "def pack_consecutive_duplicates(list1):\n    result = []\n    temp_list = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i-1]:\n            if temp_list:\n                result.append(temp_list)\n            temp_list = [list1[i]]\n        else:\n            temp_list.append(list1[i])\n    result.append(temp_list)\n    return result"}
{"task_id": 779, "correct": 1, "predict_answer": "def unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in unique_dict:\n            unique_dict[tuple(sublist)] = 1\n        else:\n            unique_dict[tuple(sublist)] += 1\n    return unique_dict"}
{"task_id": 781, "correct": 0, "predict_answer": "def count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Curious\""}
{"task_id": 782, "correct": 0, "predict_answer": "def Odd_Length_Sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": 784, "correct": 0, "predict_answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_count += 1\n    return even_product * odd_count"}
{"task_id": 785, "correct": 1, "predict_answer": "def tuple_str_int(test_str):\n    return tuple(int(i) for i in test_str.strip('()').split(','))"}
{"task_id": 786, "correct": 1, "predict_answer": "def right_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)"}
{"task_id": 788, "correct": 1, "predict_answer": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])"}
{"task_id": 790, "correct": 1, "predict_answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": 791, "correct": 1, "predict_answer": "def remove_nested(test_tup):\n    return tuple(item for item in test_tup if not isinstance(item, tuple))"}
{"task_id": 792, "correct": 1, "predict_answer": "def count_list(input_list):\n    return len(input_list)"}
{"task_id": 793, "correct": 0, "predict_answer": "def last(arr,x,n):\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"}
{"task_id": 801, "correct": 0, "predict_answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    return count"}
{"task_id": 803, "correct": 1, "predict_answer": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root*root == n"}
{"task_id": 805, "correct": 0, "predict_answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))"}
{"task_id": 807, "correct": 1, "predict_answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": 809, "correct": 1, "predict_answer": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"}
{"task_id": 811, "correct": 1, "predict_answer": "def check_identical(test_list1, test_list2):\n    if len(test_list1) != len(test_list2):\n        return False\n    for tuple1, tuple2 in zip(test_list1, test_list2):\n        if tuple1 != tuple2:\n            return False\n    return True"}
{"task_id": 812, "correct": 0, "predict_answer": "def road_rd(street):\n    return street[:-3] + ' Rd.'"}
{"task_id": 813, "correct": 1, "predict_answer": "def string_length(str1):\n    return len(str1)"}
{"task_id": 814, "correct": 0, "predict_answer": "def rombus_area(p,q):\n    return p * q"}
{"task_id": 815, "correct": 1, "predict_answer": "def sort_by_dnf(arr, n):\n    zero_count = arr.count(0)\n    one_count = arr.count(1)\n    two_count = arr.count(2)\n    return [0]*zero_count + [1]*one_count + [2]*two_count"}
{"task_id": 816, "correct": 1, "predict_answer": "def clear_tuple(test_tup):\n    return ()"}
{"task_id": 817, "correct": 1, "predict_answer": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))"}
{"task_id": 819, "correct": 1, "predict_answer": "def count_duplic(lists):\n    duplicates = []\n    frequency = []\n    count = 1\n    for i in range(1, len(lists)):\n        if lists[i] == lists[i-1]:\n            count += 1\n        else:\n            duplicates.append(lists[i-1])\n            frequency.append(count)\n            count = 1\n    duplicates.append(lists[-1])\n    frequency.append(count)\n    return duplicates, frequency"}
{"task_id": 820, "correct": 0, "predict_answer": "def check_monthnum_number(monthnum1):\n    if monthnum1 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": 828, "correct": 1, "predict_answer": "def count_alpha_dig_spl(string):\n    alpha_count = 0\n    digit_count = 0\n    special_count = 0\n    for char in string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            digit_count += 1\n        else:\n            special_count += 1\n    return alpha_count, digit_count, special_count"}
{"task_id": 829, "correct": 1, "predict_answer": "def second_frequent(input):\n    from collections import Counter\n    counter = Counter(input)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter[1][0] if len(sorted_counter) > 1 else None"}
{"task_id": 830, "correct": 1, "predict_answer": "import math\ndef round_up(a, digits):\n    factor = 10 ** digits\n    return math.ceil(a * factor) / factor"}
{"task_id": 831, "correct": 1, "predict_answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"}
{"task_id": 835, "correct": 1, "predict_answer": "def slope(x1,y1,x2,y2):\n    return (y2 - y1) / (x2 - x1)"}
{"task_id": 837, "correct": 0, "predict_answer": "def cube_Sum(n):\n    return sum(i**3 for i in range(1, n+1))"}
{"task_id": 841, "correct": 0, "predict_answer": "def analyze_text_statistics(text):"}
{"task_id": 842, "correct": 1, "predict_answer": "def get_odd_occurence(arr, arr_size):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return None"}
{"task_id": 844, "correct": 1, "predict_answer": "def get_Number(n, k):\n    odd_elements = [x for x in range(1, n+1, 2)]\n    even_elements = [x for x in range(2, n+1, 2)]\n    elements = odd_elements + even_elements\n    return elements[k-1]"}
{"task_id": 845, "correct": 1, "predict_answer": "def find_Digits(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    count = 0\n    while factorial > 0:\n        count += 1\n        factorial //= 10\n    return count\nprint(find_Digits(7))"}
{"task_id": 847, "correct": 1, "predict_answer": "def lcopy(xs):\n    return list(xs)"}
{"task_id": 848, "correct": 1, "predict_answer": "def area_trapezium(base1,base2,height):\n    return (base1 + base2) * height / 2"}
{"task_id": 849, "correct": 0, "predict_answer": "def Sum(N):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_divisors = []\n    for i in range(2, N + 1):\n        if N % i == 0 and is_prime(i):\n            prime_divisors.append(i)\n    return sum(prime_divisors)"}
{"task_id": 850, "correct": 1, "predict_answer": "def is_triangleexists(a,b,c):\n    if a + b + c == 180:\n        return True\n    else:\n        return False"}
{"task_id": 853, "correct": 1, "predict_answer": "def sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            sum += i\n    return sum"}
{"task_id": 854, "correct": 1, "predict_answer": "import heapq\ndef raw_heap(rawheap):\n    heapq.heapify(rawheap)\n    return rawheap\nprint(raw_heap([25, 44, 68, 21, 39, 23, 89]))"}
{"task_id": 855, "correct": 1, "predict_answer": "def check_Even_Parity(x):\n    return bin(x).count('1') % 2 == 0"}
{"task_id": 857, "correct": 1, "predict_answer": "def listify_list(list1):\n    return list(map(lambda x: list(x), list1))"}
{"task_id": 858, "correct": 0, "predict_answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        count += len(sublist)\n    return count ** 2"}
{"task_id": 859, "correct": 0, "predict_answer": "def sub_lists(my_list):\n    result = [[]]\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list) + 1):\n            result.append(my_list[i:j])\n    return result"}
{"task_id": 860, "correct": 1, "predict_answer": "import re\ndef check_alphanumeric(string):\n    if re.search(r'\\w+$', string):\n        return 'Accept'\n    else:\n        return 'Discard'"}
{"task_id": 861, "correct": 1, "predict_answer": "def anagram_lambda(texts,str):\n    return list(filter(lambda x: sorted(x) == sorted(str), texts))"}
{"task_id": 864, "correct": 1, "predict_answer": "def palindrome_lambda(texts):\n    return list(filter(lambda x: x == x[::-1], texts))"}
{"task_id": 865, "correct": 1, "predict_answer": "def ntimes_list(nums,n):\n    return [num * n for num in nums]"}
{"task_id": 866, "correct": 1, "predict_answer": "def check_monthnumb(monthname2):\n    days_in_month = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if monthname2 in days_in_month and days_in_month[monthname2] == 31:\n        return True\n    else:\n        return False\nprint(check_monthnumb(\"February\"))  \nprint(check_monthnumb(\"April\"))  \nprint(check_monthnumb(\"July\"))"}
{"task_id": 868, "correct": 0, "predict_answer": "def length_Of_Last_Word(a):\n    words = a.split()\n    last_word = words[-1]\n    return len(last_word)\nprint(length_Of_Last_Word(\"python language\"))"}
{"task_id": 869, "correct": 1, "predict_answer": "def remove_list_range(list1, leftrange, rigthrange):\n    return [sublist for sublist in list1 if leftrange <= min(sublist) and max(sublist) <= rigthrange]"}
{"task_id": 870, "correct": 0, "predict_answer": "def sum_positivenum(nums):\n    return sum(filter(lambda x: x > 0, nums))"}
{"task_id": 871, "correct": 1, "predict_answer": "def are_Rotations(string1,string2):\n    if len(string1) != len(string2):\n        return False\n    return string2 in (string1+string1)"}
{"task_id": 873, "correct": 1, "predict_answer": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"task_id": 874, "correct": 0, "predict_answer": "def check_Concat(str1,str2):\n    return str2 in str1"}
{"task_id": 878, "correct": 1, "predict_answer": "def check_tuples(test_tuple, K):\n    return set(test_tuple) == set(K)"}
{"task_id": 883, "correct": 1, "predict_answer": "def div_of_nums(nums,m,n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, nums))"}
{"task_id": 884, "correct": 0, "predict_answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r + 1)) - 1\n    mask = mask >> l\n    return (n & mask) == 0\nprint(all_Bits_Set_In_The_Given_Range(10, 2, 1))"}
{"task_id": 885, "correct": 1, "predict_answer": "def is_Isomorphic(str1,str2):\n    if len(str1) != len(str2):\n        return False\n    dict_str1 = {}\n    dict_str2 = {}\n    for i in range(len(str1)):\n        if str1[i] in dict_str1:\n            if dict_str1[str1[i]] != str2[i]:\n                return False\n        else:\n            dict_str1[str1[i]] = str2[i]\n        if str2[i] in dict_str2:\n            if dict_str2[str2[i]] != str1[i]:\n                return False\n        else:\n            dict_str2[str2[i]] = str1[i]\n    return True\nprint(is_Isomorphic(\"paper\", \"title\"))  \nprint(is_Isomorphic(\"foo\", \"bar\"))"}
{"task_id": 886, "correct": 0, "predict_answer": "def sum_num(numbers):\n    return sum(numbers) / len(numbers)"}
{"task_id": 888, "correct": 1, "predict_answer": "def substract_elements(test_tup1, test_tup2):\n    return tuple(tuple(a - b for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))"}
{"task_id": 890, "correct": 0, "predict_answer": "def find_Extra(arr1, arr2, n):\n    for i in range(n):\n        if arr1[i] not in arr2:\n            return i\n    return -1\narr1 = [1, 2, 3, 4]\narr2 = [1, 2, 3]\nn = 4\nprint(find_Extra(arr1, arr2, n))"}
{"task_id": 891, "correct": 0, "predict_answer": "def same_Length(A,B):\n    return A == B"}
{"task_id": 892, "correct": 1, "predict_answer": "def remove_spaces(text):\n    return ' '.join(text.split())"}
{"task_id": 894, "correct": 1, "predict_answer": "def float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(',')))"}
{"task_id": 895, "correct": 1, "predict_answer": "def max_sum_subseq(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0]\n    dp = [0] * n\n    dp[0] = A[0]\n    dp[1] = max(A[0], A[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + A[i])\n    return dp[-1]"}
{"task_id": 898, "correct": 1, "predict_answer": "def extract_elements(numbers, n):\n    result = []\n    for i in range(len(numbers)-n+1):\n        if numbers[i] == numbers[i+n-1]:\n            result.append(numbers[i])\n    return result"}
{"task_id": 901, "correct": 1, "predict_answer": "def smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(2, n + 1):\n        result = lcm(result, i)\n    return result"}
{"task_id": 902, "correct": 1, "predict_answer": "def add_dict(d1,d2):\n    result = {}\n    for key in d1.keys() | d2.keys():\n        result[key] = d1.get(key, 0) + d2.get(key, 0)\n    return result"}
{"task_id": 903, "correct": 1, "predict_answer": "def count_Unset_Bits(n):\n    unset_bits = 0\n    for i in range(1, n+1):\n        unset_bits += bin(i).count('0') - 1\n    return unset_bits"}
{"task_id": 904, "correct": 1, "predict_answer": "def even_num(x):\n    return x % 2 == 0"}
{"task_id": 908, "correct": 1, "predict_answer": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1"}
{"task_id": 913, "correct": 1, "predict_answer": "def end_num(string):\n    return string[-1].isdigit()"}
{"task_id": 919, "correct": 1, "predict_answer": "def multiply_list(items):\n    result = 1\n    for item in items:\n        result *= item\n    return result"}
{"task_id": 921, "correct": 1, "predict_answer": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]"}
{"task_id": 923, "correct": 1, "predict_answer": "def super_seq(X, Y, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]"}
{"task_id": 924, "correct": 1, "predict_answer": "def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y"}
{"task_id": 928, "correct": 1, "predict_answer": "def change_date_format(dt):\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": 932, "correct": 0, "predict_answer": "def remove_duplic_list(l):\n    return list(set(l))"}
{"task_id": 933, "correct": 1, "predict_answer": "import re\ndef camel_to_snake(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\nprint(camel_to_snake('GoogleAssistant'))"}
{"task_id": 934, "correct": 0, "predict_answer": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return dealnnoy_num(n-1, m) + dealnnoy_num(n, m-1) + dealnnoy_num(n-1, m-1)\nprint(dealnnoy_num(3, 4))"}
{"task_id": 937, "correct": 1, "predict_answer": "def max_char(str1):\n    char_count = {}\n    max_count = 0\n    max_char = ''\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char"}
{"task_id": 940, "correct": 1, "predict_answer": "import heapq\ndef heap_sort(arr):\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(len(arr))]"}
{"task_id": 941, "correct": 0, "predict_answer": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if not isinstance(item, tuple):\n            count += 1\n    return count"}
{"task_id": 942, "correct": 1, "predict_answer": "def check_element(test_tup, check_list):\n    for element in test_tup:\n        if element in check_list:\n            return True\n    return False"}
{"task_id": 945, "correct": 1, "predict_answer": "def tuple_to_set(t):\n    return set(t)"}
{"task_id": 946, "correct": 1, "predict_answer": "from collections import Counter\ndef most_common_elem(s, n):\n    char_counts = Counter(s)\n    most_common = char_counts.most_common(n)\n    return most_common\nresult = most_common_elem('lkseropewdssafsdfafkpwe', 3)\nprint(result)"}
{"task_id": 947, "correct": 1, "predict_answer": "def len_log(list1):\n    min_length = float('inf')\n    for word in list1:\n        if len(word) < min_length:\n            min_length = len(word)\n    return min_length"}
{"task_id": 948, "correct": 1, "predict_answer": "def get_item(tup1,index):\n    return tup1[index]"}
{"task_id": 956, "correct": 1, "predict_answer": "import re\ndef split_list(text):\n    return re.findall('[A-Z][^A-Z]*', text)"}
{"task_id": 964, "correct": 1, "predict_answer": "def word_len(s):\n    return len(s) % 2 == 0"}
{"task_id": 965, "correct": 1, "predict_answer": "def camel_to_snake(text):\n    result = ''\n    for char in text:\n        if char.isupper():\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result.lstrip('_')"}
{"task_id": 966, "correct": 1, "predict_answer": "def remove_empty(tuple1):\n    return [t for t in tuple1 if not t == ()]"}
{"task_id": 972, "correct": 1, "predict_answer": "def concatenate_nested(test_tup1, test_tup2):\n    return test_tup1 + test_tup2"}
{"task_id": 973, "correct": 1, "predict_answer": "def left_rotate(s,d):\n    return s[d:] + s[:d]"}
