{"task_id": 2, "correct": 1, "predict_answer": "def similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))"}
{"task_id": 3, "correct": 1, "predict_answer": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": 6, "correct": 1, "predict_answer": "def differ_At_One_Bit_Pos(x, y):\n    xor_result = x ^ y\n    return (xor_result & (xor_result - 1)) == 0\nprint(differ_At_One_Bit_Pos(13, 9))"}
{"task_id": 11, "correct": 1, "predict_answer": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif first_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    elif last_occurrence != -1:\n        return s[:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s"}
{"task_id": 12, "correct": 1, "predict_answer": "def sort_matrix(M):\n    return sorted(M, key=sum)"}
{"task_id": 14, "correct": 1, "predict_answer": "def find_Volume(l,b,h):\n    base_area = 0.5 * l * b\n    volume = base_area * h\n    return volume"}
{"task_id": 19, "correct": 1, "predict_answer": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": 24, "correct": 0, "predict_answer": "def binary_to_decimal(binary):\n    return int(binary, 2)"}
{"task_id": 27, "correct": 0, "predict_answer": "def remove(lst):\n    result = []\n    for item in lst:\n        if not item.isdigit():\n            result.append(item)\n    return result"}
{"task_id": 28, "correct": 1, "predict_answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"}
{"task_id": 29, "correct": 1, "predict_answer": "def get_Odd_Occurrence(arr, arr_size):\n    count_dict = {}\n    for i in range(arr_size):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None"}
{"task_id": 37, "correct": 1, "predict_answer": "def sort_mixed_list(mixed_list):\n    integers = sorted([item for item in mixed_list if isinstance(item, int)])\n    strings = sorted([item for item in mixed_list if isinstance(item, str)])\n    return integers + strings"}
{"task_id": 40, "correct": 1, "predict_answer": "def freq_element(nums):\n    freq_dict = {}\n    for sublist in nums:\n        for num in sublist:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n    return freq_dict"}
{"task_id": 41, "correct": 1, "predict_answer": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"}
{"task_id": 42, "correct": 0, "predict_answer": "def find_Sum(arr, n):\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    sum_recurrent = 0\n    for element, count in element_count.items():\n        if count > 1:\n            sum_recurrent += element\n    return sum_recurrent\nprint(find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8))"}
{"task_id": 49, "correct": 1, "predict_answer": "def specified_element(nums, N):\n    return [row[N] for row in nums]"}
{"task_id": 53, "correct": 1, "predict_answer": "def check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""}
{"task_id": 54, "correct": 1, "predict_answer": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count_list = [0] * (max_val + 1)\n    for num in my_list:\n        count_list[num] += 1\n    sorted_list = []\n    for num, count in enumerate(count_list):\n        sorted_list.extend([num] * count)\n    return sorted_list"}
{"task_id": 57, "correct": 1, "predict_answer": "def find_Max_Num(arr,n):\n    arr.sort(reverse=True)\n    return int(''.join(map(str,arr)))"}
{"task_id": 59, "correct": 1, "predict_answer": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": 61, "correct": 0, "predict_answer": "def count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == n:\n                count += 1\n    return count"}
{"task_id": 64, "correct": 1, "predict_answer": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])"}
{"task_id": 67, "correct": 1, "predict_answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\nprint(bell_number(2))"}
{"task_id": 68, "correct": 1, "predict_answer": "def is_Monotonic(A):\n    increasing = True\n    decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True"}
{"task_id": 69, "correct": 1, "predict_answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"}
{"task_id": 74, "correct": 1, "predict_answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    pattern_dict = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = color\n        elif pattern_dict[pattern] != color:\n            return False\n    return True"}
{"task_id": 76, "correct": 0, "predict_answer": "def count_Squares(m,n):\n    total_squares = 0\n    for i in range(1, min(m, n) + 1):\n        total_squares += i**2\n    return total_squares"}
{"task_id": 79, "correct": 0, "predict_answer": "def word_len(s):\n    return len(s) % 2 == 0"}
{"task_id": 88, "correct": 1, "predict_answer": "def freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": 89, "correct": 1, "predict_answer": "def closest_num(N):\n    return N - 1"}
{"task_id": 90, "correct": 1, "predict_answer": "def len_log(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": 91, "correct": 1, "predict_answer": "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"}
{"task_id": 93, "correct": 1, "predict_answer": "def power(a, b):\n    return a ** b"}
{"task_id": 94, "correct": 1, "predict_answer": "def index_minimum(test_list):\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0]"}
{"task_id": 96, "correct": 1, "predict_answer": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": 98, "correct": 1, "predict_answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": 99, "correct": 1, "predict_answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": 101, "correct": 1, "predict_answer": "def kth_element(arr, n, k):\n    return arr[k-1]"}
{"task_id": 105, "correct": 1, "predict_answer": "def count(lst):\n    return lst.count(True)"}
{"task_id": 106, "correct": 1, "predict_answer": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)"}
{"task_id": 109, "correct": 0, "predict_answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i:] + s[:i] == s[::-1]:\n            count += 1\n    return count"}
{"task_id": 111, "correct": 1, "predict_answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": 115, "correct": 1, "predict_answer": "def empty_dit(list1):\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"}
{"task_id": 116, "correct": 1, "predict_answer": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"}
{"task_id": 118, "correct": 1, "predict_answer": "def string_to_list(string):\n    return string.split()"}
{"task_id": 121, "correct": 1, "predict_answer": "def check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count > 0"}
{"task_id": 130, "correct": 1, "predict_answer": "def max_occurrences(nums):\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_num = max(num_dict, key=num_dict.get)\n    max_count = num_dict[max_num]\n    return (max_num, max_count)"}
{"task_id": 131, "correct": 1, "predict_answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"}
{"task_id": 145, "correct": 1, "predict_answer": "def max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": 154, "correct": 1, "predict_answer": "def specified_element(nums, N):\n    return [row[N] for row in nums]"}
{"task_id": 156, "correct": 1, "predict_answer": "def tuple_int_str(tuple_str):\n    return tuple(tuple(int(num) for num in inner_tuple) for inner_tuple in tuple_str)"}
{"task_id": 157, "correct": 1, "predict_answer": "def encode_list(list1):\n    encoded_list = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            count += 1\n        else:\n            encoded_list.append([count, list1[i-1]])\n            count = 1\n    encoded_list.append([count, list1[-1]])\n    return encoded_list"}
{"task_id": 163, "correct": 0, "predict_answer": ""}
{"task_id": 166, "correct": 1, "predict_answer": "def find_even_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": 167, "correct": 1, "predict_answer": "def next_Power_Of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": 168, "correct": 1, "predict_answer": "def frequency(a,x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"}
{"task_id": 169, "correct": 1, "predict_answer": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + 2*b\n        return b"}
{"task_id": 170, "correct": 1, "predict_answer": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])"}
{"task_id": 176, "correct": 1, "predict_answer": "def perimeter_triangle(a,b,c):\n    return a + b + c"}
{"task_id": 187, "correct": 1, "predict_answer": "def longest_common_subsequence(X, Y, m, n):\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]"}
{"task_id": 189, "correct": 1, "predict_answer": "def first_Missing_Positive(arr,n):\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1"}
{"task_id": 191, "correct": 1, "predict_answer": "import calendar\ndef check_monthnumber(monthname3):\n    days_in_month = calendar.monthrange(2021, list(calendar.month_name).index(monthname3))[1]\n    return days_in_month == 30"}
{"task_id": 192, "correct": 1, "predict_answer": "def check_String(str):\n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False"}
{"task_id": 193, "correct": 1, "predict_answer": "def remove_tuple(test_tup):\n    return tuple(set(test_tup))"}
{"task_id": 195, "correct": 1, "predict_answer": "def first(arr, x, n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"}
{"task_id": 196, "correct": 1, "predict_answer": "def remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]"}
{"task_id": 199, "correct": 1, "predict_answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": 200, "correct": 1, "predict_answer": "def position_max(list1):\n    max_value = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_value]"}
{"task_id": 201, "correct": 1, "predict_answer": "def chkList(lst):\n    return len(set(lst)) == 1"}
{"task_id": 205, "correct": 0, "predict_answer": "def inversion_elements(test_tup):\n    return tuple(-x for x in test_tup)"}
{"task_id": 206, "correct": 0, "predict_answer": "def concatenate_elements(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"}
{"task_id": 213, "correct": 0, "predict_answer": "def concatenate_strings(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + \" \" + test_tup2[i])\n    return tuple(result)"}
{"task_id": 215, "correct": 0, "predict_answer": "def decode_list(alist):\n    result = []\n    for item in alist:\n        if isinstance(item, list):\n            result.extend(decode_list(item))\n        else:\n            result.append(item)\n    return result"}
{"task_id": 222, "correct": 1, "predict_answer": "def check_type(test_tuple):\n    return len(set(map(type, test_tuple))) == 1"}
{"task_id": 223, "correct": 1, "predict_answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"}
{"task_id": 225, "correct": 1, "predict_answer": "def find_Min(arr,low,high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high)//2\n    if arr[mid] < arr[high]:\n        return find_Min(arr,low,mid-1)\n    else:\n        return find_Min(arr,mid+1,high)"}
{"task_id": 226, "correct": 1, "predict_answer": "def odd_values_string(str):\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"}
{"task_id": 227, "correct": 1, "predict_answer": "def min_of_three(a,b,c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"}
{"task_id": 231, "correct": 0, "predict_answer": "def max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum"}
{"task_id": 232, "correct": 1, "predict_answer": "def larg_nnum(list1,n):\n    list1.sort(reverse=True)\n    return list1[:n]"}
{"task_id": 238, "correct": 0, "predict_answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if len(set(str[i:j])) == 1:\n                count += 1\n    return count"}
{"task_id": 240, "correct": 0, "predict_answer": "def replace_list(list1, list2):\n    list1.extend(list2)\n    list1.pop()\n    return list1"}
{"task_id": 242, "correct": 1, "predict_answer": "def count_charac(str1):\n    return len(str1)"}
{"task_id": 246, "correct": 0, "predict_answer": "def babylonian_squareroot(number):\n    guess = number / 2.0\n    tolerance = 0.000001\n    while abs(guess * guess - number) > tolerance:\n        guess = (guess + number / guess) / 2.0\n    return guess"}
{"task_id": 247, "correct": 1, "predict_answer": "def lps(str):\n    def dp(i, j):\n        if i == j:\n            return 1\n        if str[i] == str[j] and i + 1 == j:\n            return 2\n        if str[i] == str[j]:\n            return dp(i + 1, j - 1) + 2\n        return max(dp(i, j - 1), dp(i + 1, j))\n    return dp(0, len(str) - 1)"}
{"task_id": 249, "correct": 1, "predict_answer": "def intersection_array(array_nums1,array_nums2):\n    return list(filter(lambda x: x in array_nums2, array_nums1))"}
{"task_id": 256, "correct": 1, "predict_answer": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": 257, "correct": 1, "predict_answer": "def swap_numbers(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\nprint(swap_numbers(10, 20))"}
{"task_id": 258, "correct": 1, "predict_answer": "def count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"}
{"task_id": 261, "correct": 1, "predict_answer": "def division_elements(test_tup1, test_tup2):\n    return tuple(x // y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 262, "correct": 1, "predict_answer": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"}
{"task_id": 266, "correct": 1, "predict_answer": "def lateralsurface_cube(l):\n    return 4 * l * l"}
{"task_id": 267, "correct": 1, "predict_answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\nprint(square_Sum(2))"}
{"task_id": 269, "correct": 1, "predict_answer": "def ascii_value(k):\n    return ord(k)"}
{"task_id": 273, "correct": 1, "predict_answer": "def substract_elements(test_tup1, test_tup2):\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 277, "correct": 1, "predict_answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"}
{"task_id": 278, "correct": 0, "predict_answer": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            count += 1\n    return count"}
{"task_id": 281, "correct": 1, "predict_answer": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"}
{"task_id": 282, "correct": 1, "predict_answer": "def sub_list(nums1,nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"}
{"task_id": 283, "correct": 1, "predict_answer": "def validate(n):\n    str_n = str(n)\n    for digit in str_n:\n        if str_n.count(digit) > int(digit):\n            return False\n    return True\nprint(validate(1234))  \nprint(validate(1123))"}
{"task_id": 284, "correct": 1, "predict_answer": "def check_element(list,element):\n    return all(item == element for item in list)"}
{"task_id": 287, "correct": 1, "predict_answer": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])"}
{"task_id": 290, "correct": 1, "predict_answer": "def max_length(list1):\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)"}
{"task_id": 292, "correct": 1, "predict_answer": "def find(n,m):\n    return n // m"}
{"task_id": 297, "correct": 1, "predict_answer": "def flatten_list(list1):\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": 301, "correct": 1, "predict_answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    return 0"}
{"task_id": 309, "correct": 1, "predict_answer": "def maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": 317, "correct": 1, "predict_answer": "def modified_encode(alist):\n    result = []\n    count = 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i-1]:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, alist[i-1]])\n            else:\n                result.append(alist[i-1])\n            count = 1\n    if count > 1:\n        result.append([count, alist[-1]])\n    else:\n        result.append(alist[-1])\n    return result"}
{"task_id": 319, "correct": 0, "predict_answer": "import re\ndef find_long_word(text):\n    long_words = re.findall(r'\\b\\w{5,}\\b', text)\n    return long_words\nprint(find_long_word('Please move back to strem'))"}
{"task_id": 322, "correct": 1, "predict_answer": "def position_min(list1):\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]"}
{"task_id": 325, "correct": 1, "predict_answer": "def get_Min_Squares(n):\n    squares = [i**2 for i in range(1, int(n**0.5) + 1)]\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for square in squares:\n            if i >= square:\n                dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[n]"}
{"task_id": 330, "correct": 1, "predict_answer": "import re\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\nresult = find_char('For the four consumer complaints contact manager AKR reddy')\nprint(result)"}
{"task_id": 333, "correct": 1, "predict_answer": "def Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])"}
{"task_id": 334, "correct": 1, "predict_answer": "def check_Validity(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"}
{"task_id": 336, "correct": 1, "predict_answer": "def check_monthnum(monthname1):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if monthname1 in month_days:\n        return month_days[monthname1] == 28\n    else:\n        return False"}
{"task_id": 340, "correct": 0, "predict_answer": "def sum_three_smallest_nums(lst):\n    lst.sort()\n    return sum(lst[:3])"}
{"task_id": 341, "correct": 0, "predict_answer": "def set_to_tuple(s):\n    return tuple(s)"}
{"task_id": 345, "correct": 0, "predict_answer": "def diff_consecutivenums(nums):\n    discrepancies = []\n    for i in range(len(nums)-1):\n        discrepancies.append(abs(nums[i] - nums[i+1]))\n    return discrepancies"}
{"task_id": 349, "correct": 1, "predict_answer": "def check(string):\n    if all(char in ['0', '1'] for char in string):\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": 350, "correct": 0, "predict_answer": "def minimum_Length(s):\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return len(s) - 1\n    return len(s)"}
{"task_id": 352, "correct": 1, "predict_answer": "def unique_Characters(str):\n    return len(str) == len(set(str))"}
{"task_id": 357, "correct": 1, "predict_answer": "def find_max(test_list):\n    max_value = test_list[0][1]\n    for record in test_list:\n        if record[1] > max_value:\n            max_value = record[1]\n    return max_value"}
{"task_id": 358, "correct": 1, "predict_answer": "def moddiv_list(nums1,nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))"}
{"task_id": 359, "correct": 1, "predict_answer": "def Check_Solution(a,b,c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if root1 == 2*root2 or root2 == 2*root1:\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": 361, "correct": 1, "predict_answer": "def remove_empty(list1):\n    return [item for item in list1 if item != []]"}
{"task_id": 362, "correct": 1, "predict_answer": "def max_occurrences(nums):\n    from collections import Counter\n    counts = Counter(nums)\n    max_count = max(counts.values())\n    max_items = [item for item, count in counts.items() if count == max_count]\n    return max_items[0] if max_items else None"}
{"task_id": 363, "correct": 1, "predict_answer": "def add_K_element(test_list, K):\n    return [(x[0] + K, x[1] + K, x[2] + K) for x in test_list]"}
{"task_id": 365, "correct": 1, "predict_answer": "def count_Digit(n):\n    return len(str(n))"}
{"task_id": 366, "correct": 1, "predict_answer": "def adjacent_num_product(list_nums):\n    max_product = 0\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": 370, "correct": 1, "predict_answer": "def float_sort(price):\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"}
{"task_id": 371, "correct": 1, "predict_answer": "def smallest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return right_element + 1"}
{"task_id": 372, "correct": 1, "predict_answer": "import heapq\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    sorted_nums = []\n    while nums:\n        sorted_nums.append(heapq.heappop(nums))\n    return sorted_nums\nprint(heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))"}
{"task_id": 376, "correct": 1, "predict_answer": "def remove_replica(test_tup):\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append('MSP')\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"}
{"task_id": 378, "correct": 1, "predict_answer": "def move_first(test_list):\n    if len(test_list) <= 1:\n        return test_list\n    last_element = test_list[-1]\n    test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\nprint(move_first([1, 2, 3, 4]))"}
{"task_id": 381, "correct": 1, "predict_answer": "def index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])"}
{"task_id": 382, "correct": 1, "predict_answer": "def find_rotation_count(A):\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": 384, "correct": 1, "predict_answer": "def frequency_Of_Smallest(n,arr):\n    smallest_value = min(arr)\n    frequency = arr.count(smallest_value)\n    return frequency"}
{"task_id": 387, "correct": 1, "predict_answer": "def even_or_odd(N):\n    decimal_num = int(N, 16)\n    if decimal_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 388, "correct": 1, "predict_answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": 389, "correct": 1, "predict_answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": 391, "correct": 1, "predict_answer": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    return result"}
{"task_id": 397, "correct": 1, "predict_answer": "def median_numbers(a,b,c):\n    numbers = sorted([a, b, c])\n    return numbers[1]"}
{"task_id": 400, "correct": 0, "predict_answer": "def extract_freq(test_list):\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"}
{"task_id": 401, "correct": 1, "predict_answer": "def add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(x, y)) for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 403, "correct": 1, "predict_answer": "import re\ndef is_valid_URL(url):\n    regex = r'^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$'\n    if re.search(regex, url):\n        return True\n    else:\n        return False"}
{"task_id": 405, "correct": 1, "predict_answer": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex"}
{"task_id": 406, "correct": 1, "predict_answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""}
{"task_id": 408, "correct": 1, "predict_answer": "def k_smallest_pairs(nums1, nums2, k):\n    result = []\n    heap = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return result"}
{"task_id": 410, "correct": 0, "predict_answer": "def min_val(listval):\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"}
{"task_id": 413, "correct": 1, "predict_answer": "def extract_nth_element(list1, n):\n    return [t[n] for t in list1]"}
{"task_id": 414, "correct": 1, "predict_answer": "def overlapping(list1,list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False"}
{"task_id": 418, "correct": 1, "predict_answer": "def Find_Max(lst):\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist"}
{"task_id": 420, "correct": 1, "predict_answer": "def cube_Sum(n):\n    return sum([i**3 for i in range(2, 2*n+1, 2)])"}
{"task_id": 421, "correct": 1, "predict_answer": "def concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))"}
{"task_id": 426, "correct": 1, "predict_answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"}
{"task_id": 428, "correct": 1, "predict_answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"}
{"task_id": 429, "correct": 1, "predict_answer": "def and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"}
{"task_id": 432, "correct": 1, "predict_answer": "def median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2"}
{"task_id": 435, "correct": 1, "predict_answer": "def last_Digit(n):\n    return n % 10"}
{"task_id": 439, "correct": 0, "predict_answer": "def multiple_to_single(L):\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"}
{"task_id": 445, "correct": 1, "predict_answer": "def index_multiplication(test_tup1, test_tup2):\n    result = tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 446, "correct": 1, "predict_answer": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count"}
{"task_id": 447, "correct": 1, "predict_answer": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"}
{"task_id": 457, "correct": 1, "predict_answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"}
{"task_id": 459, "correct": 1, "predict_answer": "import re\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\nresult = remove_uppercase('cAstyoUrFavoRitETVshoWs')\nprint(result)"}
{"task_id": 463, "correct": 1, "predict_answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result"}
{"task_id": 467, "correct": 0, "predict_answer": "def decimal_to_Octal(deciNum):\n    return oct(deciNum)[2:]"}
{"task_id": 469, "correct": 1, "predict_answer": "def max_profit(price, k):\n    if not price or k == 0:\n        return 0\n    n = len(price)\n    dp = [[0] * n for _ in range(k+1)]\n    for i in range(1, k+1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - price[j])\n    return dp[k][n-1]"}
{"task_id": 472, "correct": 1, "predict_answer": "def check_Consecutive(l):\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True"}
{"task_id": 475, "correct": 0, "predict_answer": "def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1])"}
{"task_id": 477, "correct": 1, "predict_answer": "def is_lower(string):\n    return string.lower()"}
{"task_id": 478, "correct": 1, "predict_answer": "def remove_lowercase(str1):\n    result = ''\n    for char in str1:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": 479, "correct": 0, "predict_answer": ""}
{"task_id": 480, "correct": 1, "predict_answer": "def get_max_occuring_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\nprint(get_max_occuring_char(\"data\"))"}
{"task_id": 484, "correct": 1, "predict_answer": "def remove_matching_tuple(test_list1, test_list2):\n    return [t for t in test_list1 if t not in test_list2]"}
{"task_id": 487, "correct": 1, "predict_answer": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"}
{"task_id": 488, "correct": 0, "predict_answer": "def area_pentagon(a):\n    if not isinstance(a, int) or a <= 0:\n        raise ValueError(\"Input must be a positive integer representing the side length of the pentagon.\")\n    apothem = a / (2 * math.tan(math.pi / 5))\n    area = (5 * a * apothem) / 2\n    return area"}
{"task_id": 489, "correct": 1, "predict_answer": "def frequency_Of_Largest(n,arr):\n    max_val = max(arr)\n    return arr.count(max_val)"}
{"task_id": 491, "correct": 1, "predict_answer": "def sum_gp(a,n,r):\n    return (a*(1-r**n))/(1-r)"}
{"task_id": 492, "correct": 1, "predict_answer": "def binary_search(item_list, item):\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        guess = item_list[mid]\n        if guess == item:\n            return True\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False"}
{"task_id": 494, "correct": 1, "predict_answer": "def binary_to_integer(test_tup):\n    binary_str = ''.join(str(bit) for bit in test_tup)\n    return str(int(binary_str, 2))"}
{"task_id": 495, "correct": 1, "predict_answer": "import re\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 498, "correct": 1, "predict_answer": "def gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x"}
{"task_id": 500, "correct": 0, "predict_answer": "def concatenate_elements(lst):\n    return ' '.join(lst)"}
{"task_id": 502, "correct": 0, "predict_answer": "def find(n,m):\n    return n-m"}
{"task_id": 505, "correct": 1, "predict_answer": "def re_order(A):\n    insert_pos = 0\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[insert_pos] = A[i]\n            insert_pos += 1\n    for i in range(insert_pos, len(A)):\n        A[i] = 0\n    return A"}
{"task_id": 506, "correct": 0, "predict_answer": "def permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    return math.factorial(n) // math.factorial(n - k)"}
{"task_id": 507, "correct": 1, "predict_answer": "def remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]"}
{"task_id": 509, "correct": 1, "predict_answer": "def average_Odd(n):\n    if n % 2 == 0:\n        raise ValueError(\"Input must be an odd number.\")\n    sum_odd = 0\n    count = 0\n    for i in range(1, n + 1, 2):\n        sum_odd += i\n        count += 1\n    return sum_odd / count"}
{"task_id": 513, "correct": 1, "predict_answer": "def add_str(test_tup, K):\n    result = []\n    for i in test_tup:\n        result.append(i)\n        result.append(K)\n    return result"}
{"task_id": 516, "correct": 0, "predict_answer": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = nums[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = nums[i] // exp\n        output[count[index % 10] - 1] = nums[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(n):\n        nums[i] = output[i]\ndef radix_sort(nums):\n    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\nnums = [15, 79, 25, 68, 37]\nradix_sort(nums)\nprint(nums)"}
{"task_id": 518, "correct": 1, "predict_answer": "import math\ndef sqrt_root(num):\n    return math.sqrt(num)"}
{"task_id": 519, "correct": 0, "predict_answer": "import math\ndef volume_tetrahedron(edge):\n    volume = (edge ** 3) / (6 * math.sqrt(2))\n    return volume\nprint(volume_tetrahedron(10))"}
{"task_id": 522, "correct": 1, "predict_answer": "def lbs(arr):\n    n = len(arr)\n    ascending = [1] * n\n    descending = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and ascending[i] < ascending[j] + 1:\n                ascending[i] = ascending[j] + 1\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and descending[i] < descending[j] + 1:\n                descending[i] = descending[j] + 1\n    lbs = 0\n    for i in range(n):\n        lbs = max(lbs, ascending[i] + descending[i] - 1)\n    return lbs"}
{"task_id": 526, "correct": 1, "predict_answer": "def capitalize_first_last_letters(str1):\n    words = str1.split()\n    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in words]\n    return ' '.join(capitalized_words)"}
{"task_id": 528, "correct": 1, "predict_answer": "def min_length(list1):\n    min_list = min(list1, key=lambda x: len(x))\n    return (len(min_list), min_list)"}
{"task_id": 531, "correct": 1, "predict_answer": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                sub_res = dp[i - coins[j]]\n                if sub_res != float('inf') and sub_res + 1 < dp[i]:\n                    dp[i] = sub_res + 1\n    return dp[V] if dp[V] != float('inf') else -1"}
{"task_id": 534, "correct": 0, "predict_answer": "def search_literal(pattern,text):\n    start = 0\n    while True:\n        start = text.find(pattern,start)\n        if start == -1: return\n        yield (start,start+len(pattern))\nresult = search_literal('python', 'python programming language')\nfor location in result:\n    print(location)"}
{"task_id": 539, "correct": 1, "predict_answer": "def basesnum_coresspondingnum(bases_num,index):\n    return list(map(lambda x, y: x**y, bases_num, index))"}
{"task_id": 540, "correct": 1, "predict_answer": "def find_Diff(arr, n):\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    max_freq = max(freq_dict.values())\n    min_freq = min(freq_dict.values())\n    return max_freq - min_freq"}
{"task_id": 541, "correct": 0, "predict_answer": "def get_sum(n):\n    divisors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors) > n"}
{"task_id": 542, "correct": 1, "predict_answer": "import re\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"task_id": 543, "correct": 1, "predict_answer": "def count_digits(num1,num2):\n    sum_num = num1 + num2\n    return len(str(sum_num))"}
{"task_id": 544, "correct": 1, "predict_answer": "def flatten_tuple(test_list):\n    return ' '.join([' '.join(t) for t in test_list])"}
{"task_id": 549, "correct": 1, "predict_answer": "def odd_Num_Sum(n):\n    return sum(i**5 for i in range(1, n*2, 2))"}
{"task_id": 550, "correct": 0, "predict_answer": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    mid = (low + high) // 2\n    if arr[mid] > arr[high]:\n        return find_Max(arr, mid + 1, high)\n    else:\n        return find_Max(arr, low, mid)\narr = [2, 3, 5, 6, 9]\nlow = 0\nhigh = 4\nprint(find_Max(arr, low, high))"}
{"task_id": 554, "correct": 0, "predict_answer": "def Split(lst):\n    return [lst[i] for i in range(len(lst)) if i % 2 == 0]"}
{"task_id": 555, "correct": 1, "predict_answer": "def difference(n):\n    sum_of_numbers = sum(range(1, n+1))\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": 556, "correct": 1, "predict_answer": "def find_Odd_Pair(A, N):\n    odd_pair_count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 != 0:\n                odd_pair_count += 1\n    return odd_pair_count\nprint(find_Odd_Pair([5, 4, 7, 2, 1], 5))"}
{"task_id": 560, "correct": 1, "predict_answer": "def union_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) | set(test_tup2))"}
{"task_id": 563, "correct": 1, "predict_answer": "import re\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 564, "correct": 0, "predict_answer": "def count_Pairs(arr,n):\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                pairs += 1\n    return pairs"}
{"task_id": 565, "correct": 1, "predict_answer": "def split(word):\n    return list(word)"}
{"task_id": 568, "correct": 1, "predict_answer": "def empty_list(length):\n    return [{}] * length"}
{"task_id": 569, "correct": 1, "predict_answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"}
{"task_id": 570, "correct": 0, "predict_answer": "def remove_words(list1, charlist):\n    result = []\n    for item in list1:\n        words = item.split()\n        new_words = []\n        for word in words:\n            if not any(char in word for char in charlist):\n                new_words.append(word)\n        result.append(' '.join(new_words))\n    return result\nprint(remove_words(['Red color', 'Orange"}
{"task_id": 573, "correct": 1, "predict_answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))"}
{"task_id": 576, "correct": 1, "predict_answer": "def is_Sub_Array(A,B,n,m):\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            j += 1\n        i += 1\n    return j == m"}
{"task_id": 577, "correct": 1, "predict_answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": 578, "correct": 1, "predict_answer": "def interleave_lists(list1,list2,list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]))"}
{"task_id": 579, "correct": 1, "predict_answer": "def find_dissimilar(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))"}
{"task_id": 580, "correct": 0, "predict_answer": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n        else:\n            pass\n    return tuple(result)\neven_ele((4, 5, (7, 6, (2, 4)), 6, 8), lambda x: x % 2 == 0)"}
{"task_id": 581, "correct": 1, "predict_answer": "def surface_Area(b,s):\n    return b**2 + 2*b*s"}
{"task_id": 582, "correct": 0, "predict_answer": "def my_dict(dict1):\n    return bool(dict1)"}
{"task_id": 583, "correct": 1, "predict_answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    return res"}
{"task_id": 585, "correct": 0, "predict_answer": "import heapq\ndef expensive_items(items, n):\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, (item['price'], item))\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return [item[1] for item in min_heap]"}
{"task_id": 586, "correct": 1, "predict_answer": "def split_Arr(a,n,k):\n    first_part = a[:k]\n    second_part = a[k:]\n    return second_part + first_part"}
{"task_id": 589, "correct": 1, "predict_answer": "def perfect_squares(a, b):\n    perfect_squares_list = []\n    for i in range(a, b + 1):\n        sqrt_i = i ** 0.5\n        if sqrt_i.is_integer():\n            perfect_squares_list.append(i)\n    return perfect_squares_list\nprint(perfect_squares(1, 30))"}
{"task_id": 591, "correct": 1, "predict_answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 593, "correct": 0, "predict_answer": "def removezero_ip(ip):\n    return '.'.join(map(str, ip.split('.')))"}
{"task_id": 596, "correct": 1, "predict_answer": "import sys\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)"}
{"task_id": 598, "correct": 1, "predict_answer": "def armstrong_number(number):\n    sum_of_cubes = 0\n    original_number = number\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit ** 3\n        number //= 10\n    return sum_of_cubes == original_number"}
{"task_id": 599, "correct": 1, "predict_answer": "def sum_average(number):\n    total_sum = 0\n    for i in range(1, number + 1):\n        total_sum += i\n    average = total_sum / number\n    return (total_sum, average)"}
{"task_id": 604, "correct": 1, "predict_answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\ninput_string = \"python program\"\nreversed_string = reverse_words(input_string)\nprint(reversed_string)"}
{"task_id": 605, "correct": 1, "predict_answer": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": 607, "correct": 1, "predict_answer": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (pattern, match.start(), match.end())\n    else:\n        return (None, None, None)"}
{"task_id": 610, "correct": 1, "predict_answer": "def remove_kth_element(list1, L):\n    list1.pop(L-1)\n    return list1"}
{"task_id": 611, "correct": 0, "predict_answer": "def max_of_nth(test_list, N):\n    return max(row[N-1] for row in test_list)"}
{"task_id": 613, "correct": 1, "predict_answer": "def maximum_value(test_list):\n    result = []\n    for key, values in test_list:\n        max_value = max(values)\n        result.append((key, max_value))\n    return result"}
{"task_id": 614, "correct": 1, "predict_answer": "def cummulative_sum(test_list):\n    total = 0\n    for sublist in test_list:\n        total += sum(sublist)\n    return total"}
{"task_id": 618, "correct": 1, "predict_answer": "def div_list(nums1, nums2):\n    return list(map(lambda x, y: x / y, nums1, nums2))"}
{"task_id": 624, "correct": 1, "predict_answer": "def is_upper(string):\n    return string.upper()"}
{"task_id": 625, "correct": 1, "predict_answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 627, "correct": 1, "predict_answer": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1"}
{"task_id": 628, "correct": 1, "predict_answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": 634, "correct": 1, "predict_answer": "def even_Power_Sum(n):\n    return sum([i**4 for i in range(2, 2*n+1, 2)])"}
{"task_id": 635, "correct": 1, "predict_answer": "import heapq\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"}
{"task_id": 639, "correct": 1, "predict_answer": "def sample_nam(sample_names):\n    total_duration = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_duration += len(name)\n    return total_duration"}
{"task_id": 646, "correct": 1, "predict_answer": "def No_of_cubes(N, K):\n    if N < K:\n        return 0\n    return (N - K + 1) ** 3"}
{"task_id": 647, "correct": 1, "predict_answer": "def split_upperstring(text):\n    result = []\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return result"}
{"task_id": 649, "correct": 1, "predict_answer": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1])"}
{"task_id": 653, "correct": 1, "predict_answer": "import collections\ndef grouping_dictionary(l):\n    result = collections.defaultdict(list)\n    for key, value in l:\n        result[key].append(value)\n    return dict(result)"}
{"task_id": 654, "correct": 1, "predict_answer": "def rectangle_perimeter(l,b):\n    return 2 * (l + b)"}
{"task_id": 657, "correct": 1, "predict_answer": "def first_Digit(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    factorial_str = str(factorial)\n    return int(factorial_str[0])\nprint(first_Digit(5))"}
{"task_id": 658, "correct": 1, "predict_answer": "def max_occurrences(list1):\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    return max_item"}
{"task_id": 662, "correct": 1, "predict_answer": "def sorted_dict(dict1):\n    sorted_dict = {}\n    for key, value in dict1.items():\n        sorted_dict[key] = sorted(value)\n    return sorted_dict"}
{"task_id": 663, "correct": 1, "predict_answer": "def find_max_val(n, x, y):\n    for k in range(n, -1, -1):\n        if k % x == y:\n            return k\n    return -1"}
{"task_id": 664, "correct": 1, "predict_answer": "def average_Even(n):\n    if n < 2:\n        return None\n    else:\n        sum_even = 0\n        count = 0\n        for i in range(2, n + 1, 2):\n            sum_even += i\n            count += 1\n        return sum_even / count"}
{"task_id": 665, "correct": 1, "predict_answer": "def move_last(num_list):\n    return num_list[1:] + [num_list[0]]"}
{"task_id": 667, "correct": 1, "predict_answer": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": 668, "correct": 0, "predict_answer": "def replace(string, char):\n    return string.replace(char, '')"}
{"task_id": 669, "correct": 1, "predict_answer": "import re\ndef check_IP(Ip):\n    pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    if pattern.match(Ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'"}
{"task_id": 673, "correct": 1, "predict_answer": "def convert(list):\n    return int(''.join(map(str, list)))"}
{"task_id": 675, "correct": 1, "predict_answer": "def sum_nums(x, y, m, n):\n    total = x + y\n    if m <= total <= n:\n        return 20\n    else:\n        return total"}
{"task_id": 676, "correct": 1, "predict_answer": "import re\ndef remove_extra_char(text1):\n    return re.sub(r'\\W+', '', text1)"}
{"task_id": 678, "correct": 1, "predict_answer": "def remove_spaces(str1):\n    return ''.join(str1.split())"}
{"task_id": 679, "correct": 0, "predict_answer": "def access_key(ditionary,key):\n    return list(dictionay.keys())[key]"}
{"task_id": 680, "correct": 1, "predict_answer": "def increasing_trend(nums):\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True"}
{"task_id": 681, "correct": 1, "predict_answer": "def smallest_Divisor(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": 682, "correct": 1, "predict_answer": "def mul_list(nums1,nums2):\n    return list(map(lambda x, y: x * y, nums1, nums2))"}
{"task_id": 683, "correct": 1, "predict_answer": "def sum_Square(n):\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False"}
{"task_id": 688, "correct": 0, "predict_answer": "def len_complex(a,b):\n    return float(abs(a-b))"}
{"task_id": 689, "correct": 1, "predict_answer": "def min_jumps(arr, n):\n    if n == 0 or arr[0] == 0:\n        return float('inf')\n    jumps = [0] + [float('inf')] * (n-1)\n    for i in range(1, n):\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]"}
{"task_id": 691, "correct": 1, "predict_answer": "def group_element(test_list):\n    grouped_dict = {}\n    for item in test_list:\n        if item[1] in grouped_dict:\n            grouped_dict[item[1]].append(item[0])\n        else:\n            grouped_dict[item[1]] = [item[0]]\n    return grouped_dict"}
{"task_id": 692, "correct": 1, "predict_answer": "import math\ndef last_Two_Digits(N):\n    factorial = math.factorial(N)\n    last_two_digits = factorial % 100\n    return last_two_digits\nprint(last_Two_Digits(7))"}
{"task_id": 695, "correct": 1, "predict_answer": "def check_greater(test_tup1, test_tup2):\n    return all(x < y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 696, "correct": 1, "predict_answer": "def zip_list(list1,list2):\n    zipped_list = []\n    for i in range(len(list1)):\n        zipped_list.append(list1[i] + list2[i])\n    return zipped_list"}
{"task_id": 697, "correct": 1, "predict_answer": "def count_even(array_nums):\n    return len(list(filter(lambda x: x % 2 == 0, array_nums)))"}
{"task_id": 701, "correct": 1, "predict_answer": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1"}
{"task_id": 704, "correct": 1, "predict_answer": "def harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))"}
{"task_id": 705, "correct": 1, "predict_answer": "def sort_sublists(list1):\n    return sorted(list1, key=lambda x: (len(x), x))"}
{"task_id": 707, "correct": 1, "predict_answer": "def count_Set_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count"}
{"task_id": 708, "correct": 1, "predict_answer": "def Convert(string):\n    return string.split()"}
{"task_id": 711, "correct": 1, "predict_answer": "def product_Equal(n):\n    num_str = str(n)\n    product_even = 1\n    product_odd = 1\n    for i, digit in enumerate(num_str):\n        digit = int(digit)\n        if i % 2 == 0:\n            product_even *= digit\n        else:\n            product_odd *= digit\n    return product_even == product_odd\nprint(product_Equal(2841))"}
{"task_id": 715, "correct": 1, "predict_answer": "def str_to_tuple(test_str):\n    return tuple(map(int, test_str.split(',')))"}
{"task_id": 716, "correct": 1, "predict_answer": "def rombus_perimeter(a):\n    return 2 * (a + a)"}
{"task_id": 717, "correct": 0, "predict_answer": "import math\ndef sd_calc(data):\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / len(data)\n    std_dev = math.sqrt(variance)\n    return std_dev"}
{"task_id": 718, "correct": 1, "predict_answer": "def alternate_elements(list1):\n    return [list1[i] for i in range(0, len(list1), 2)]"}
{"task_id": 720, "correct": 1, "predict_answer": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)"}
{"task_id": 722, "correct": 0, "predict_answer": ""}
{"task_id": 724, "correct": 1, "predict_answer": "def power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base**power))"}
{"task_id": 726, "correct": 1, "predict_answer": "def multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"}
{"task_id": 727, "correct": 1, "predict_answer": "import re\ndef remove_char(S):\n    return re.sub(r'[^a-zA-Z0-9]', '', S)"}
{"task_id": 729, "correct": 1, "predict_answer": "def add_list(nums1,nums2):\n    return list(map(lambda x, y: x + y, nums1, nums2))"}
{"task_id": 730, "correct": 1, "predict_answer": "def consecutive_duplicates(nums):\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            result.append(nums[i])\n    return result"}
{"task_id": 731, "correct": 1, "predict_answer": "import math\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    LSA = math.pi * r * l\n    return LSA\nprint(lateralsurface_cone(5, 12))"}
{"task_id": 732, "correct": 1, "predict_answer": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": 736, "correct": 1, "predict_answer": "def left_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)"}
{"task_id": 737, "correct": 1, "predict_answer": "import re\ndef check_str(string):\n    vowel_pattern = r'^[aeiouAEIOU]'\n    if re.match(vowel_pattern, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\nprint(check_str(\"annie\"))  \nprint(check_str(\"bob\"))"}
{"task_id": 739, "correct": 1, "predict_answer": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": 740, "correct": 1, "predict_answer": "def tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\nprint(tuple_to_dict((1, 5, 7, 10, 13, 5)))"}
{"task_id": 744, "correct": 1, "predict_answer": "def check_none(test_tup):\n    return None in test_tup"}
{"task_id": 747, "correct": 1, "predict_answer": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]"}
{"task_id": 751, "correct": 0, "predict_answer": "def check_min_heap(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    if left < len(arr) and check_min_heap(arr, left):\n        return False\n    if right < len(arr) and check_min_heap(arr, right):\n        return False\n    return True"}
{"task_id": 752, "correct": 1, "predict_answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"}
{"task_id": 753, "correct": 1, "predict_answer": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]"}
{"task_id": 755, "correct": 0, "predict_answer": "def second_smallest(numbers):\n    numbers.sort()\n    return numbers[1]\nprint(second_smallest([1, 2, -8, -2, 0, -2]))"}
{"task_id": 758, "correct": 0, "predict_answer": "def unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    return unique_dict"}
{"task_id": 759, "correct": 0, "predict_answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"}
{"task_id": 762, "correct": 1, "predict_answer": "def check_monthnumber_number(monthnum3):\n    months_with_30_days = [4, 6, 9, 11]\n    if monthnum3 in months_with_30_days:\n        return True\n    else:\n        return False"}
{"task_id": 764, "correct": 1, "predict_answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": 768, "correct": 1, "predict_answer": "def check_Odd_Parity(x):\n    if x % 2 != 0:\n        return True\n    else:\n        return False"}
{"task_id": 770, "correct": 1, "predict_answer": "def odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))"}
{"task_id": 771, "correct": 1, "predict_answer": "def check_expression(exp):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n    return len(stack) == 0"}
{"task_id": 772, "correct": 1, "predict_answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    result = ' '.join(filtered_words)\n    return result\nprint(remove_length('The person is most value tet', 3))"}
{"task_id": 775, "correct": 0, "predict_answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] != nums[i-1]:\n            return False\n    return True"}
{"task_id": 778, "correct": 1, "predict_answer": "def pack_consecutive_duplicates(list1):\n    result = []\n    temp_list = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i-1]:\n            if temp_list:\n                result.append(temp_list)\n            temp_list = [list1[i]]\n        else:\n            temp_list.append(list1[i])\n    result.append(temp_list)\n    return result"}
{"task_id": 779, "correct": 1, "predict_answer": "def unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    return unique_dict"}
{"task_id": 781, "correct": 0, "predict_answer": "def count_Divisors(n):\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    if divisor_count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Curious\"\nprint(count_Divisors(10))"}
{"task_id": 782, "correct": 1, "predict_answer": "def Odd_Length_Sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": 784, "correct": 0, "predict_answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n        else:\n            odd_product *= num\n            odd_count += 1\n        if even_count == odd_count:\n            break\n    return even_product"}
{"task_id": 785, "correct": 1, "predict_answer": "def tuple_str_int(test_str):\n    return tuple(int(item) for item in test_str.strip('()').split(', '))"}
{"task_id": 786, "correct": 1, "predict_answer": "def right_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)"}
{"task_id": 788, "correct": 1, "predict_answer": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])"}
{"task_id": 790, "correct": 1, "predict_answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": 791, "correct": 1, "predict_answer": "def remove_nested(test_tup):\n    result = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return result\nprint(remove_nested((1, 5, 7, (4, 6), 10)))"}
{"task_id": 792, "correct": 1, "predict_answer": "def count_list(input_list):\n    return len(input_list)"}
{"task_id": 793, "correct": 1, "predict_answer": "def last(arr,x,n):\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == n-1 or arr[mid+1] != x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": 801, "correct": 0, "predict_answer": "def test_three_equal(x,y,z):\n    if x == y == z:\n        return 3\n    else:\n        return 0"}
{"task_id": 803, "correct": 1, "predict_answer": "def is_Perfect_Square(n):\n    return int(n**0.5)**2 == n"}
{"task_id": 805, "correct": 1, "predict_answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"}
{"task_id": 807, "correct": 1, "predict_answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": 809, "correct": 1, "predict_answer": "def check_smaller(test_tup1, test_tup2):\n    return all(test_tup2[i] < test_tup1[i] for i in range(len(test_tup1)))"}
{"task_id": 811, "correct": 1, "predict_answer": "def check_identical(test_list1, test_list2):\n    if len(test_list1) != len(test_list2):\n        return False\n    for tuple1, tuple2 in zip(test_list1, test_list2):\n        if tuple1 != tuple2:\n            return False\n    return True"}
{"task_id": 812, "correct": 0, "predict_answer": "def road_rd(street):\n    return street[:-1] + \" Rd.\""}
{"task_id": 813, "correct": 1, "predict_answer": "def string_length(str1):\n    return len(str1)"}
{"task_id": 814, "correct": 1, "predict_answer": "def rombus_area(p,q):\n    return (p*q)/2"}
{"task_id": 815, "correct": 1, "predict_answer": "def sort_by_dnf(arr, n):\n    d = {0:0, 1:1, 2:2}\n    for i in range(n):\n        arr[i] = d[arr[i]]\n    arr.sort()\n    for i in range(n):\n        arr[i] = d[arr[i]]\n    return arr"}
{"task_id": 816, "correct": 1, "predict_answer": "def clear_tuple(test_tup):\n    return ()"}
{"task_id": 817, "correct": 1, "predict_answer": "def div_of_nums(nums,m,n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))"}
{"task_id": 819, "correct": 1, "predict_answer": "def count_duplic(lists):\n    result_list = []\n    count_list = []\n    prev_element = None\n    count = 0\n    for element in lists:\n        if element == prev_element:\n            count += 1\n        else:\n            if prev_element is not None:\n                result_list.append(prev_element)\n                count_list.append(count)\n            prev_element = element\n            count = 1\n    result_list.append(prev_element)\n    count_list.append(count)\n    return result_list, count_list"}
{"task_id": 820, "correct": 0, "predict_answer": "def check_monthnum_number(monthnum1):\n    months_with_28_days = [4, 6, 9, 11]\n    if monthnum1 in months_with_28_days:\n        return True\n    else:\n        return False"}
{"task_id": 828, "correct": 1, "predict_answer": "def count_alpha_dig_spl(string):\n    alpha_count = 0\n    digit_count = 0\n    special_count = 0\n    for char in string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            digit_count += 1\n        else:\n            special_count += 1\n    return alpha_count, digit_count, special_count"}
{"task_id": 829, "correct": 1, "predict_answer": "def second_frequent(input):\n    from collections import Counter\n    counts = Counter(input)\n    most_common = counts.most_common()\n    if len(most_common) < 2:\n        return None\n    return most_common[1][0]"}
{"task_id": 830, "correct": 1, "predict_answer": "import math\ndef round_up(a, digits):\n    multiplier = 10 ** digits\n    return math.ceil(a * multiplier) / multiplier"}
{"task_id": 831, "correct": 1, "predict_answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"}
{"task_id": 835, "correct": 1, "predict_answer": "def slope(x1, y1, x2, y2):\n    return (y2 - y1) / (x2 - x1)"}
{"task_id": 837, "correct": 1, "predict_answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum"}
{"task_id": 841, "correct": 1, "predict_answer": "def get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": 842, "correct": 1, "predict_answer": "def get_odd_occurence(arr, arr_size):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return None"}
{"task_id": 844, "correct": 1, "predict_answer": "def get_Number(n, k):\n    odd_list = [i for i in range(1, n+1, 2)]\n    even_list = [i for i in range(2, n+1, 2)]\n    combined_list = odd_list + even_list\n    return combined_list[k-1]"}
{"task_id": 845, "correct": 1, "predict_answer": "def find_Digits(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    num_digits = len(str(factorial))\n    return num_digits"}
{"task_id": 847, "correct": 1, "predict_answer": "def lcopy(xs):\n    return list(xs)"}
{"task_id": 848, "correct": 1, "predict_answer": "def area_trapezium(base1,base2,height):\n    return (base1 + base2) * height / 2"}
{"task_id": 849, "correct": 1, "predict_answer": "def Sum(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_divisors = []\n    for i in range(2, N + 1):\n        if N % i == 0 and is_prime(i):\n            prime_divisors.append(i)\n    return sum(prime_divisors)"}
{"task_id": 850, "correct": 0, "predict_answer": "def is_triangleexists(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"}
{"task_id": 853, "correct": 1, "predict_answer": "def sum_of_odd_Factors(n):\n    sum_of_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            sum_of_factors += i\n    return sum_of_factors"}
{"task_id": 854, "correct": 1, "predict_answer": "import heapq\ndef raw_heap(rawheap):\n    heapq.heapify(rawheap)\n    return rawheap\nprint(raw_heap([25, 44, 68, 21, 39, 23, 89]))"}
{"task_id": 855, "correct": 1, "predict_answer": "def check_Even_Parity(x):\n    return bin(x).count('1') % 2 == 0"}
{"task_id": 857, "correct": 1, "predict_answer": "def listify_list(list1):\n    return list(map(lambda x: list(x), list1))"}
{"task_id": 858, "correct": 0, "predict_answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        count += len(sublist)\n    return count ** 2"}
{"task_id": 859, "correct": 0, "predict_answer": "def sub_lists(my_list):\n    result = [[]]\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list) + 1):\n            result.append(my_list[i:j])\n    return result"}
{"task_id": 860, "correct": 1, "predict_answer": "import re\ndef check_alphanumeric(string):\n    if re.search(r'\\w$', string):\n        return 'Accept'\n    else:\n        return 'Discard'"}
{"task_id": 861, "correct": 1, "predict_answer": "def anagram_lambda(texts, str):\n    return list(filter(lambda x: sorted(x) == sorted(str), texts))"}
{"task_id": 864, "correct": 1, "predict_answer": "def palindrome_lambda(texts):\n    return list(filter(lambda x: x == x[::-1], texts))"}
{"task_id": 865, "correct": 1, "predict_answer": "def ntimes_list(nums,n):\n    return [num * n for num in nums]"}
{"task_id": 866, "correct": 1, "predict_answer": "def check_monthnumb(monthname2):\n    days_in_month = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return days_in_month.get(monthname2, False) == 31"}
{"task_id": 868, "correct": 1, "predict_answer": "def length_Of_Last_Word(a):\n    words = a.split()\n    if words:\n        return len(words[-1])\n    else:\n        return 0\nprint(length_Of_Last_Word(\"python language\"))"}
{"task_id": 869, "correct": 1, "predict_answer": "def remove_list_range(list1, leftrange, rigthrange):\n    return [sublist for sublist in list1 if leftrange <= min(sublist) and max(sublist) <= rigthrange]"}
{"task_id": 870, "correct": 1, "predict_answer": "def sum_positivenum(nums):\n    return sum(filter(lambda x: x > 0, nums))"}
{"task_id": 871, "correct": 1, "predict_answer": "def are_Rotations(string1,string2):\n    if len(string1) != len(string2):\n        return False\n    concatenated_string = string1 + string1\n    return string2 in concatenated_string"}
{"task_id": 873, "correct": 1, "predict_answer": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"task_id": 874, "correct": 0, "predict_answer": "def check_Concat(str1,str2):\n    return str2 in str1"}
{"task_id": 878, "correct": 0, "predict_answer": "def check_tuples(test_tuple, K):\n    return len(test_tuple) == len(K)"}
{"task_id": 883, "correct": 1, "predict_answer": "def div_of_nums(nums,m,n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, nums))"}
{"task_id": 884, "correct": 0, "predict_answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if (n & (1 << i)) == 0:\n            return False\n    return True"}
{"task_id": 885, "correct": 1, "predict_answer": "def is_Isomorphic(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    mapping1 = {}\n    mapping2 = {}\n    for char1, char2 in zip(str1, str2):\n        if char1 in mapping1 and mapping1[char1] != char2:\n            return False\n        if char2 in mapping2 and mapping2[char2] != char1:\n            return False\n        mapping1[char1] = char2\n        mapping2[char2] = char1\n    return True"}
{"task_id": 886, "correct": 1, "predict_answer": "def sum_num(numbers):\n    return sum(numbers) / len(numbers)"}
{"task_id": 888, "correct": 0, "predict_answer": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        subtracted_tup = tuple(a - b for a, b in zip(tup1, tup2))\n        result.append(subtracted_tup)\n    return result\nresult = substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\nprint(result)"}
{"task_id": 890, "correct": 1, "predict_answer": "def find_Extra(arr1,arr2,n):\n    i = 0\n    while i < n and arr1[i] == arr2[i]:\n        i += 1\n    return i"}
{"task_id": 891, "correct": 1, "predict_answer": "def same_Length(A, B):\n    return len(str(A)) == len(str(B))"}
{"task_id": 892, "correct": 0, "predict_answer": "def remove_spaces(text):\n    return text.replace(' ', '')"}
{"task_id": 894, "correct": 1, "predict_answer": "def float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(',')))"}
{"task_id": 895, "correct": 0, "predict_answer": "def max_sum_subseq(A):\n    dp = [0] * len(A)\n    dp[0] = max(0, A[0])\n    for i in range(1, len(A)):\n        dp[i] = max(dp[i-1], dp[i-1] + A[i])\n    return dp[-1]"}
{"task_id": 898, "correct": 0, "predict_answer": "def extract_elements(numbers, n):\n    result = []\n    count = 0\n    for i in range(len(numbers)-1):\n        if numbers[i] == numbers[i+1]:\n            count += 1\n            if count == n:\n                result.append(numbers[i])\n                break\n        else:\n            count = 0\n    return result"}
{"task_id": 901, "correct": 0, "predict_answer": "def smallest_multiple(n):\n    from math import factorial\n    return factorial(n)"}
{"task_id": 902, "correct": 1, "predict_answer": "def add_dict(d1,d2):\n    result = {}\n    for key in d1:\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2:\n        if key not in result:\n            result[key] = d2[key]\n    return result"}
{"task_id": 903, "correct": 1, "predict_answer": "def count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('0') - 1\n    return count"}
{"task_id": 904, "correct": 1, "predict_answer": "def even_num(x):\n    return x % 2 == 0"}
{"task_id": 908, "correct": 1, "predict_answer": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1"}
{"task_id": 913, "correct": 0, "predict_answer": "def end_num(string):\n    return string[0].isdigit() and string[-1].isdigit()"}
{"task_id": 919, "correct": 1, "predict_answer": "def multiply_list(items):\n    result = 1\n    for item in items:\n        result *= item\n    return result"}
{"task_id": 921, "correct": 1, "predict_answer": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]"}
{"task_id": 923, "correct": 1, "predict_answer": "def super_seq(X, Y, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]"}
{"task_id": 924, "correct": 1, "predict_answer": "def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y"}
{"task_id": 928, "correct": 1, "predict_answer": "import datetime\ndef change_date_format(dt):\n    date_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n    formatted_date = date_obj.strftime('%d-%m-%Y')\n    return formatted_date\nprint(change_date_format('2026-01-02'))"}
{"task_id": 932, "correct": 1, "predict_answer": "def remove_duplic_list(l):\n    return list(dict.fromkeys(l))"}
{"task_id": 933, "correct": 1, "predict_answer": "import re\ndef camel_to_snake(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\nprint(camel_to_snake('GoogleAssistant'))"}
{"task_id": 934, "correct": 0, "predict_answer": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return dealnnoy_num(n-1, m) + dealnnoy_num(n, m-1) + dealnnoy_num(n-1, m-1)"}
{"task_id": 937, "correct": 1, "predict_answer": "def max_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char"}
{"task_id": 940, "correct": 1, "predict_answer": "def heap_sort(arr):\n    def heapify(n, i):\n        largest = i  \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]  \n            heapify(n, largest)\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  \n        heapify(i, 0)\n    return arr"}
{"task_id": 941, "correct": 0, "predict_answer": "def count_elim(num):\n    count = 0\n    for i in num:\n        if not isinstance(i, tuple):\n            count += 1\n    return count"}
{"task_id": 942, "correct": 1, "predict_answer": "def check_element(test_tup, check_list):\n    for element in test_tup:\n        if element in check_list:\n            return True\n    return False"}
{"task_id": 945, "correct": 1, "predict_answer": "def tuple_to_set(t):\n    return set(t)"}
{"task_id": 946, "correct": 1, "predict_answer": "from collections import Counter\ndef most_common_elem(s, n):\n    char_list = list(s)\n    char_counts = Counter(char_list)\n    most_common = char_counts.most_common(n)\n    return most_common\nresult = most_common_elem('lkseropewdssafsdfafkpwe', 3)\nprint(result)"}
{"task_id": 947, "correct": 1, "predict_answer": "def len_log(list1):\n    shortest_length = float('inf')\n    for word in list1:\n        if len(word) < shortest_length:\n            shortest_length = len(word)\n    return shortest_length"}
{"task_id": 948, "correct": 1, "predict_answer": "def get_item(tup1,index):\n    return tup1[index]"}
{"task_id": 956, "correct": 1, "predict_answer": "import re\ndef split_list(text):\n    return re.findall('[A-Z][^A-Z]*', text)"}
{"task_id": 964, "correct": 1, "predict_answer": ""}
{"task_id": 965, "correct": 0, "predict_answer": "def camel_to_snake(text):\n    result = ''\n    for i, char in enumerate(text):\n        if char.isupper() and i != 0:\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": 966, "correct": 1, "predict_answer": "def remove_empty(tuple1):\n    return [t for t in tuple1 if t]"}
{"task_id": 972, "correct": 1, "predict_answer": "def concatenate_nested(test_tup1, test_tup2):\n    return test_tup1 + test_tup2"}
{"task_id": 973, "correct": 1, "predict_answer": "def left_rotate(s,d):\n    return s[d:] + s[:d]"}
