{"task_id": 7, "correct": 1, "predict_answer": "def find_char_long(text):\n    return re.findall(r\"\\w{4,}\", text)"}
{"task_id": 17, "correct": 1, "predict_answer": "def square_perimeter(a):\n    return 4 * a"}
{"task_id": 27, "correct": 0, "predict_answer": "def remove(list):\n    new_list = []\n    for word in list:\n        for char in word:\n            if char.isdigit():\n                pass\n            else:\n                new_list.append(word)\n    return new_list"}
{"task_id": 52, "correct": 1, "predict_answer": "def parallelogram_area(b,h):\n    return b*h"}
{"task_id": 65, "correct": 0, "predict_answer": "def recursive_list_sum(data_list):\n    pass"}
{"task_id": 71, "correct": 0, "predict_answer": "def comb_sort(nums):\n    pass"}
{"task_id": 80, "correct": 1, "predict_answer": "def tetrahedral_number(n):\n    return n*(n+1)*(n+2)/6"}
{"task_id": 91, "correct": 1, "predict_answer": "def find_substring(str1, sub_str):\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"}
{"task_id": 93, "correct": 1, "predict_answer": "def power(a,b):\n    return a**b"}
{"task_id": 95, "correct": 0, "predict_answer": "def Find_Min_Length(lst):\n    pass"}
{"task_id": 121, "correct": 0, "predict_answer": "def check_triplet(A, n, sum, count):\n    pass"}
{"task_id": 127, "correct": 1, "predict_answer": "def multiply_int(x, y):\n    return x * y"}
{"task_id": 131, "correct": 0, "predict_answer": "def reverse_vowels(str1):\n    return str1"}
{"task_id": 140, "correct": 0, "predict_answer": "def extract_singly(test_list):\n    pass"}
{"task_id": 145, "correct": 0, "predict_answer": "def max_Abs_Diff(arr,n):\n    pass"}
{"task_id": 156, "correct": 0, "predict_answer": "def tuple_int_str(tuple_str):\n    pass"}
{"task_id": 161, "correct": 1, "predict_answer": "def remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"}
{"task_id": 173, "correct": 1, "predict_answer": "def remove_splchar(text):\n    return \"\".join(c for c in text if c.isalnum())"}
{"task_id": 174, "correct": 1, "predict_answer": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d"}
{"task_id": 176, "correct": 1, "predict_answer": "def perimeter_triangle(a,b,c):\n    return a+b+c"}
{"task_id": 242, "correct": 1, "predict_answer": "def count_charac(str1):\n    return len(str1)"}
{"task_id": 249, "correct": 0, "predict_answer": "def intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))"}
{"task_id": 250, "correct": 1, "predict_answer": "def count_X(tup, x):\n    return tup.count(x)"}
{"task_id": 253, "correct": 1, "predict_answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": 257, "correct": 1, "predict_answer": "def swap_numbers(a,b):\n    return b,a"}
{"task_id": 263, "correct": 1, "predict_answer": "def merge_dict(d1,d2):\n    return {**d1,**d2}"}
{"task_id": 265, "correct": 0, "predict_answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"}
{"task_id": 266, "correct": 0, "predict_answer": "def lateralsurface_cube(l):\n    return 6*l**2"}
{"task_id": 269, "correct": 1, "predict_answer": "def ascii_value(k):\n    return ord(k)"}
{"task_id": 270, "correct": 1, "predict_answer": "def sum_even_and_even_index(arr,n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"}
{"task_id": 281, "correct": 0, "predict_answer": "def all_unique(test_list):\n    return True"}
{"task_id": 282, "correct": 1, "predict_answer": "def sub_list(nums1,nums2):\n    return list(map(lambda x,y:x-y,nums1,nums2))"}
{"task_id": 320, "correct": 0, "predict_answer": "def sum_difference(n):\n    pass"}
{"task_id": 322, "correct": 0, "predict_answer": "def position_min(list1):\n    pass"}
{"task_id": 332, "correct": 0, "predict_answer": "def char_frequency(str1):\n    return {}"}
{"task_id": 357, "correct": 0, "predict_answer": "def find_max(test_list):\n    return max(test_list)"}
{"task_id": 358, "correct": 1, "predict_answer": "def moddiv_list(nums1, nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))"}
{"task_id": 366, "correct": 0, "predict_answer": "def adjacent_num_product(list_nums):\n    pass"}
{"task_id": 371, "correct": 0, "predict_answer": "def smallest_missing(A, left_element, right_element):\n    pass"}
{"task_id": 375, "correct": 1, "predict_answer": "def round_num(n,m):\n    return int(n/m)*m"}
{"task_id": 377, "correct": 1, "predict_answer": "def remove_Char(s,c):\n    return s.replace(c,'')"}
{"task_id": 379, "correct": 1, "predict_answer": "def surfacearea_cuboid(l,w,h):\n    return 2*(l*w+l*h+w*h)"}
{"task_id": 381, "correct": 1, "predict_answer": "def index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])"}
{"task_id": 395, "correct": 0, "predict_answer": "def first_non_repeating_character(str1):\n    return None"}
{"task_id": 405, "correct": 1, "predict_answer": "def check_tuplex(tuplex,tuple1):\n    return tuple1 in tuplex"}
{"task_id": 409, "correct": 0, "predict_answer": "def min_product_tuple(list1):\n    pass"}
{"task_id": 412, "correct": 1, "predict_answer": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]"}
{"task_id": 425, "correct": 1, "predict_answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"}
{"task_id": 441, "correct": 1, "predict_answer": "def surfacearea_cube(l):\n    return 6*l**2"}
{"task_id": 445, "correct": 0, "predict_answer": "def index_multiplication(test_tup1, test_tup2):\n    pass"}
{"task_id": 446, "correct": 0, "predict_answer": "def count_Occurrence(tup, lst):\n    return 0"}
{"task_id": 447, "correct": 1, "predict_answer": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"}
{"task_id": 450, "correct": 0, "predict_answer": "def extract_string(str, l):\n    return str[l:]"}
{"task_id": 451, "correct": 1, "predict_answer": "def remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"}
{"task_id": 463, "correct": 0, "predict_answer": "def max_subarray_product(arr):\n    pass"}
{"task_id": 474, "correct": 1, "predict_answer": "def replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)"}
{"task_id": 484, "correct": 1, "predict_answer": "def remove_matching_tuple(test_list1, test_list2):\n    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return result"}
{"task_id": 487, "correct": 1, "predict_answer": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[1])"}
{"task_id": 495, "correct": 1, "predict_answer": "def remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 499, "correct": 1, "predict_answer": "def diameter_circle(r):\n    return 2 * r"}
{"task_id": 502, "correct": 1, "predict_answer": "def find(n,m):\n    return n%m"}
{"task_id": 507, "correct": 1, "predict_answer": "def remove_words(list1, removewords):\n    new_list = []\n    for word in list1:\n        if word not in removewords:\n            new_list.append(word)\n    return new_list"}
{"task_id": 514, "correct": 1, "predict_answer": "def sum_elements(test_tup):\n    return sum(test_tup)"}
{"task_id": 517, "correct": 1, "predict_answer": "def largest_pos(list1):\n    return max(list1)"}
{"task_id": 518, "correct": 1, "predict_answer": "def sqrt_root(num):\n    return num ** 0.5"}
{"task_id": 531, "correct": 0, "predict_answer": "def min_coins(coins, m, V):\n    pass"}
{"task_id": 533, "correct": 0, "predict_answer": "def remove_datatype(test_tuple, data_type):\n    pass"}
{"task_id": 542, "correct": 1, "predict_answer": "def fill_spaces(text):\n    pattern = r'\\s|,|\\.'\n    return re.sub(pattern, ':', text)"}
{"task_id": 543, "correct": 1, "predict_answer": "def count_digits(num1,num2):\n    return len(str(num1+num2))"}
{"task_id": 551, "correct": 1, "predict_answer": "def extract_column(list1, n):\n    return [row[n] for row in list1]"}
{"task_id": 555, "correct": 1, "predict_answer": "def difference(n):\n    return sum(i**3 for i in range(1, n+1)) - sum(i for i in range(1, n+1))"}
{"task_id": 564, "correct": 0, "predict_answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] + arr[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": 565, "correct": 1, "predict_answer": "def split(word):\n    return list(word)"}
{"task_id": 566, "correct": 1, "predict_answer": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"}
{"task_id": 578, "correct": 1, "predict_answer": "def interleave_lists(list1,list2,list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": 588, "correct": 1, "predict_answer": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": 596, "correct": 0, "predict_answer": "def tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)"}
{"task_id": 598, "correct": 0, "predict_answer": "def armstrong_number(number):\n    pass"}
{"task_id": 600, "correct": 1, "predict_answer": "def is_Even(n) :\n    return n & 1 == 0"}
{"task_id": 606, "correct": 0, "predict_answer": "def radian_degree(degree):\n    return degree*math.pi/180"}
{"task_id": 611, "correct": 0, "predict_answer": "def max_of_nth(test_list, N):\n    pass"}
{"task_id": 618, "correct": 1, "predict_answer": "def div_list(nums1,nums2):\n    return list(map(lambda x,y:x/y,nums1,nums2))"}
{"task_id": 621, "correct": 1, "predict_answer": "def increment_numerics(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i].isnumeric():\n            test_list[i] = str(int(test_list[i]) + K)\n    return test_list"}
{"task_id": 623, "correct": 1, "predict_answer": "def nth_nums(nums,n):\n    return [num**n for num in nums]"}
{"task_id": 624, "correct": 1, "predict_answer": "def is_upper(string):\n    return string.upper()"}
{"task_id": 625, "correct": 0, "predict_answer": "def swap_List(newList):\n    pass"}
{"task_id": 628, "correct": 1, "predict_answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": 637, "correct": 1, "predict_answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False"}
{"task_id": 639, "correct": 1, "predict_answer": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())"}
{"task_id": 654, "correct": 1, "predict_answer": "def rectangle_perimeter(l,b):\n    return 2*(l+b)"}
{"task_id": 662, "correct": 0, "predict_answer": "def sorted_dict(dict1):"}
{"task_id": 666, "correct": 1, "predict_answer": "def count_char(string,char):\n    return string.count(char)"}
{"task_id": 673, "correct": 0, "predict_answer": "def convert(list):\n    return sum(list)"}
{"task_id": 676, "correct": 1, "predict_answer": "def remove_extra_char(text1):\n    return re.sub(r'[^a-zA-Z0-9]', '', text1)"}
{"task_id": 680, "correct": 1, "predict_answer": "def increasing_trend(nums):\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True"}
{"task_id": 682, "correct": 1, "predict_answer": "def mul_list(nums1,nums2):\n    return list(map(lambda x,y:x*y,nums1,nums2))"}
{"task_id": 688, "correct": 1, "predict_answer": "def len_complex(a,b):\n    return (a**2+b**2)**0.5"}
{"task_id": 691, "correct": 0, "predict_answer": "def group_element(test_list):\n    pass"}
{"task_id": 693, "correct": 1, "predict_answer": "def remove_multiple_spaces(text1):\n    return re.sub(r'\\s+', ' ', text1)"}
{"task_id": 703, "correct": 1, "predict_answer": "def is_key_present(d,x):\n    return x in d"}
{"task_id": 708, "correct": 1, "predict_answer": "def Convert(string):\n    return string.split()"}
{"task_id": 710, "correct": 1, "predict_answer": "def front_and_rear(test_tup):\n    return test_tup[0], test_tup[-1]"}
{"task_id": 715, "correct": 1, "predict_answer": "def str_to_tuple(test_str):\n    return tuple(map(int, test_str.split(',')))"}
{"task_id": 722, "correct": 1, "predict_answer": "def filter_data(students,h,w):\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}"}
{"task_id": 729, "correct": 1, "predict_answer": "def add_list(nums1,nums2):\n    return list(map(lambda x,y:x+y,nums1,nums2))"}
{"task_id": 733, "correct": 1, "predict_answer": "def find_first_occurrence(A, x):\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"}
{"task_id": 749, "correct": 0, "predict_answer": "def sort_numeric_strings(nums_str):\n    pass"}
{"task_id": 764, "correct": 1, "predict_answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": 766, "correct": 1, "predict_answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"}
{"task_id": 768, "correct": 1, "predict_answer": "def check_Odd_Parity(x):\n    return x % 2 == 1"}
{"task_id": 772, "correct": 0, "predict_answer": "def remove_length(test_str, K):\n    pass"}
{"task_id": 789, "correct": 1, "predict_answer": "def perimeter_polygon(s,l):\n    return s*l"}
{"task_id": 792, "correct": 1, "predict_answer": "def count_list(input_list):\n    return len(input_list)"}
{"task_id": 793, "correct": 0, "predict_answer": "def last(arr,x,n):\n    pass"}
{"task_id": 801, "correct": 0, "predict_answer": "def test_three_equal(x,y,z):\n    return x+y+z"}
{"task_id": 803, "correct": 1, "predict_answer": "def is_Perfect_Square(n):\n    return n**0.5 == int(n**0.5)"}
{"task_id": 804, "correct": 1, "predict_answer": "def is_Product_Even(arr,n):\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % 2 == 0"}
{"task_id": 806, "correct": 1, "predict_answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            uppercase_count = 0\n        max_run = max(max_run, uppercase_count)\n    return max_run"}
{"task_id": 817, "correct": 1, "predict_answer": "def div_of_nums(nums,m,n):\n    return list(filter(lambda x:x%m==0 or x%n==0,nums))"}
{"task_id": 818, "correct": 1, "predict_answer": "def lower_ctr(str):\n    count = 0\n    for char in str:\n        if char.islower():\n            count += 1\n    return count"}
{"task_id": 820, "correct": 0, "predict_answer": "def check_monthnum_number(monthnum1):\n    return True"}
{"task_id": 821, "correct": 1, "predict_answer": "def merge_dictionaries(dict1,dict2):\n    return {**dict1,**dict2}"}
{"task_id": 831, "correct": 1, "predict_answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"}
{"task_id": 847, "correct": 1, "predict_answer": "def lcopy(xs):\n    return xs"}
{"task_id": 853, "correct": 1, "predict_answer": "def sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 != 0 and n % i == 0:\n            sum += i\n    return sum"}
{"task_id": 864, "correct": 1, "predict_answer": "def palindrome_lambda(texts):\n    return list(filter(lambda x: x == x[::-1], texts))"}
{"task_id": 865, "correct": 1, "predict_answer": "def ntimes_list(nums,n):\n    return list(map(lambda x:x*n,nums))"}
{"task_id": 869, "correct": 1, "predict_answer": "def remove_list_range(list1, leftrange, rigthrange):\n    result = []\n    for sublist in list1:\n        if leftrange <= sublist[0] <= rigthrange:\n            result.append(sublist)\n    return result"}
{"task_id": 870, "correct": 1, "predict_answer": "def sum_positivenum(nums):\n    return sum(filter(lambda x: x > 0, nums))"}
{"task_id": 873, "correct": 1, "predict_answer": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"task_id": 877, "correct": 0, "predict_answer": "def sort_String(str) :\n    return sorted(str)"}
{"task_id": 878, "correct": 1, "predict_answer": "def check_tuples(test_tuple, K):\n    for i in test_tuple:\n        if i not in K:\n            return False\n    return True"}
{"task_id": 885, "correct": 0, "predict_answer": "def is_Isomorphic(str1,str2):\n    if len(str1) != len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n    return True"}
{"task_id": 886, "correct": 1, "predict_answer": "def sum_num(numbers):\n    return sum(numbers) / len(numbers)"}
{"task_id": 891, "correct": 1, "predict_answer": "def same_Length(A,B):\n    return len(str(A)) == len(str(B))"}
{"task_id": 893, "correct": 1, "predict_answer": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[-1])\n    return result"}
{"task_id": 900, "correct": 1, "predict_answer": "def match_num(string):\n    return string.startswith('5')"}
{"task_id": 924, "correct": 1, "predict_answer": "def max_of_two( x, y ):\n    if x > y:\n        return x\n    else:\n        return y"}
{"task_id": 932, "correct": 0, "predict_answer": "def remove_duplic_list(l):\n    return list(set(l))"}
{"task_id": 943, "correct": 1, "predict_answer": "def combine_lists(num1,num2):\n    num1.extend(num2)\n    num1.sort()\n    return num1"}
{"task_id": 970, "correct": 1, "predict_answer": "def min_of_two( x, y ):\n    if x < y:\n        return x\n    else:\n        return y"}
{"task_id": 973, "correct": 1, "predict_answer": "def left_rotate(s,d):\n    return s[d:] + s[:d]"}
