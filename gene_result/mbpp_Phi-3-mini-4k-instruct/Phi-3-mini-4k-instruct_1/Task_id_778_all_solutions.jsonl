{"trace": {"0": {"user_requirement": "Write a functions to packed consecutive duplicates of a given listings components into sublists", "ost_step": {}, "direct_answer": {"text": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a functions to packed consecutive duplicates of a given listings components into sublists\n    for example:\n    pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    '''\n    result = []\n    temp_list = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i-1]:\n            if temp_list:\n                result.append(temp_list)\n            temp_list = [list1[i]]\n        else:\n            temp_list.append(list1[i])\n    result.append(temp_list)\n    return result", "value": 0.0625}}}, "rollout_id": 0, "type": "DIRECT_ANSWER"}
{"trace": {"0": {"user_requirement": "Write a Python function to compress consecutive duplicates in a given list into sublists.", "ost_step": {}, "direct_answer": {"text": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a Python function to compress consecutive duplicates in a given list into sublists.\n    for example:\n    pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    '''\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i-1]:\n            if sublist:\n                result.append(sublist)\n            sublist = [list1[i]]\n        else:\n            sublist.append(list1[i])\n    if sublist:\n        result.append(sublist)\n    return result", "value": 0.125}}}, "rollout_id": 1, "type": "DIRECT_ANSWER"}
